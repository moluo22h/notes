{
  "author": "moluo",
  "version": "1.2.4",
  "userSecure": "",
  "currTypeMapperGroupName": "Default",
  "currTemplateGroupName": "spring-cloud-jpa",
  "currColumnConfigGroupName": "Default",
  "currGlobalConfigGroupName": "Default",
  "typeMapper": {
    "angular3": {
      "name": "angular3",
      "elementList": [
        {
          "matchType": "REGEX",
          "columnType": "varchar(\\(\\d+\\))?",
          "javaType": "string"
        },
        {
          "matchType": "REGEX",
          "columnType": "char(\\(\\d+\\))?",
          "javaType": "string"
        },
        {
          "matchType": "REGEX",
          "columnType": "(tiny|medium|long)*text",
          "javaType": "string"
        },
        {
          "matchType": "REGEX",
          "columnType": "decimal(\\(\\d+,\\d+\\))?",
          "javaType": "number"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "integer",
          "javaType": "number"
        },
        {
          "matchType": "REGEX",
          "columnType": "(tiny|small|medium)*int(\\(\\d+\\))?",
          "javaType": "number"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "int4",
          "javaType": "number"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "int8",
          "javaType": "number"
        },
        {
          "matchType": "REGEX",
          "columnType": "bigint(\\(\\d+\\))?",
          "javaType": "number"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "date",
          "javaType": "string"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "datetime",
          "javaType": "string"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "timestamp",
          "javaType": "string"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "time",
          "javaType": "string"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "boolean",
          "javaType": "boolean"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "bit(1)",
          "javaType": "boolean"
        }
      ]
    },
    "angular": {
      "name": "angular",
      "elementList": [
        {
          "matchType": "REGEX",
          "columnType": "varchar((\\d+))?",
          "javaType": "string"
        },
        {
          "matchType": "REGEX",
          "columnType": "char((\\d+))?",
          "javaType": "string"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "text",
          "javaType": "string"
        },
        {
          "matchType": "REGEX",
          "columnType": "decimal((\\d+))?",
          "javaType": "number"
        },
        {
          "matchType": "REGEX",
          "columnType": "decimal((\\d+,\\d+))?",
          "javaType": "number"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "integer",
          "javaType": "number"
        },
        {
          "matchType": "REGEX",
          "columnType": "int((\\d+))?",
          "javaType": "number"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "int4",
          "javaType": "number"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "int8",
          "javaType": "number"
        },
        {
          "matchType": "REGEX",
          "columnType": "bigint((\\d+))?",
          "javaType": "number"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "datetime",
          "javaType": "string"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "timestamp",
          "javaType": "string"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "boolean",
          "javaType": "boolean"
        },
        {
          "matchType": "REGEX",
          "columnType": "bit((\\d+))?",
          "javaType": "boolean"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "float",
          "javaType": "number"
        }
      ]
    },
    "Default": {
      "name": "Default",
      "elementList": [
        {
          "matchType": "REGEX",
          "columnType": "varchar(\\(\\d+\\))?",
          "javaType": "java.lang.String"
        },
        {
          "matchType": "REGEX",
          "columnType": "char(\\(\\d+\\))?",
          "javaType": "java.lang.String"
        },
        {
          "matchType": "REGEX",
          "columnType": "(tiny|medium|long)*text",
          "javaType": "java.lang.String"
        },
        {
          "matchType": "REGEX",
          "columnType": "decimal(\\(\\d+,\\d+\\))?",
          "javaType": "java.lang.Double"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "integer",
          "javaType": "java.lang.Integer"
        },
        {
          "matchType": "REGEX",
          "columnType": "(tiny|small|medium)*int(\\(\\d+\\))?",
          "javaType": "java.lang.Integer"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "int4",
          "javaType": "java.lang.Integer"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "int8",
          "javaType": "java.lang.Long"
        },
        {
          "matchType": "REGEX",
          "columnType": "bigint(\\(\\d+\\))?",
          "javaType": "java.lang.Long"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "date",
          "javaType": "java.util.Date"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "datetime",
          "javaType": "java.util.Date"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "timestamp",
          "javaType": "java.util.Date"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "time",
          "javaType": "java.time.LocalTime"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "boolean",
          "javaType": "java.lang.Boolean"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "bit(1)",
          "javaType": "java.lang.Boolean"
        }
      ]
    }
  },
  "template": {
    "JPA": {
      "name": "JPA",
      "elementList": [
        {
          "name": "entity.java",
          "code": "##引入宏定义\n$!define\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/entity\", \".java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"entity\")\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n##使用全局变量实现默认包导入\n$!autoImport\nimport lombok.Data;\nimport javax.persistence.Entity;\nimport javax.persistence.Table;\nimport javax.persistence.Id;\n\n##使用宏定义实现类注释信息\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})实体类\n *\n * @author $!author\n * @since $!time.currTime(\"yyyy/MM/dd\")\n */\n@Data\n@Entity\n@Table(name = \"$!{tool.firstLowerCase($!{tableInfo.name})}\")\npublic class $!{tableInfo.name} {\n    /**\n     * ${pk.comment}\n     */\n    @Id\n    private $!{pk.shortType} $!{pk.name};\n    \n#foreach($column in $tableInfo.otherColumn)\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n    \n#end\n}"
        },
        {
          "name": "repository.java",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Repository\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/repository\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}repository;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.JpaSpecificationExecutor;\nimport org.springframework.stereotype.Repository;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表数据库访问层\n *\n * @author $!author\n * @since $!time.currTime(\"yyyy/MM/dd\")\n */\n@Repository\npublic interface $!{tableName} extends JpaRepository<$!{tableInfo.name} ,$!pk.shortType>, JpaSpecificationExecutor<$!{tableInfo.name}>{\n\n  \n}"
        },
        {
          "name": "service.java",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Service\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务接口\n *\n * @author $!author\n * @since $!time.currTime(\"yyyy/MM/dd\")\n */\npublic interface $!{tableName} {\n    /**\n     * 创建$!{tableInfo.comment}\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) $!{tableInfo.comment}\n     * @return $!{tableInfo.comment}\n     */\n    $!{tableInfo.name} create$!{tableInfo.name}($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 删除$!{tableInfo.comment}\n     *\n     * @param $!pk.name $!{tableInfo.comment}的$!{pk.comment}\n     */\n    void delete$!{tableInfo.name}($!pk.shortType $!pk.name);\n\n    /**\n     * 获取$!{tableInfo.comment}列表\n     *\n     * @return $!{tableInfo.comment}列表\n     */\n    List<$!{tableInfo.name}> list$!{tableInfo.name}s();\n\n    /**\n     * 获取$!{tableInfo.comment}列表(分页)\n     *\n     * @param queryParams 查询参数\n     * @param pageable    分页和排序参数\n     * @return $!{tableInfo.comment}列表\n     */\n    Page<$!{tableInfo.name}> list$!{tableInfo.name}s(Map<String, Object> queryParams, Pageable pageable);\n\n    /**\n     * 获取$!{tableInfo.comment}\n     *\n     * @param $!pk.name $!{tableInfo.comment}的$!{pk.comment}\n     * @return $!{tableInfo.comment}\n     */\n    $!{tableInfo.name} get$!{tableInfo.name}($!pk.shortType $!pk.name);\n    \n    /**\n     * 更新$!{tableInfo.comment}\n     *\n     * @param $!pk.name $!{tableInfo.comment}的$!{pk.comment}\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) $!{tableInfo.comment}\n     * @return $!{tableInfo.comment}\n     */\n    $!{tableInfo.name} update$!{tableInfo.name}($!pk.shortType $!pk.name, $!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n}"
        },
        {
          "name": "serviceImpl.java",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"ServiceImpl\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service/impl\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.repository.$!{tableInfo.name}Repository;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springframework.stereotype.Service;\n\nimport javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Predicate;\nimport javax.persistence.criteria.Root;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务实现类\n *\n * @author $!author\n * @since $!time.currTime(\"yyyy/MM/dd\")\n */\n@Slf4j\n@Service(\"$!tool.firstLowerCase($!{tableInfo.name})Service\")\npublic class $!{tableInfo.name}ServiceImpl implements $!{tableInfo.name}Service {\n\n    @Autowired\n    private $!{tableInfo.name}Repository $!tool.firstLowerCase($!{tableInfo.name})Repository;\n\n    @Override\n    public $!{tableInfo.name} create$!{tableInfo.name}($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        return $!{tool.firstLowerCase($!{tableInfo.name})}Repository.save($!tool.firstLowerCase($!{tableInfo.name}));\n    }\n\n    @Override\n    public void delete$!{tableInfo.name}(String id) {\n        $!{tool.firstLowerCase($!{tableInfo.name})}Repository.deleteById(id);\n    }\n\n    @Override\n    public List<$!{tableInfo.name}> list$!{tableInfo.name}s() {\n        return $!{tool.firstLowerCase($!{tableInfo.name})}Repository.findAll();\n    }\n\n    @Override\n    public Page<$!{tableInfo.name}> list$!{tableInfo.name}s(Map<String, Object> queryParams, Pageable pageable) {\n        Specification<$!{tableInfo.name}> specification = new Specification<$!{tableInfo.name}>() {\n            @Override\n            public Predicate toPredicate(Root<$!{tableInfo.name}> root, CriteriaQuery<?> query, CriteriaBuilder criteriaBuilder) {\n                List<Predicate> list = new ArrayList<>();\n#foreach($column in $tableInfo.otherColumn)\n                //  若$!{column.name}存在，根据$!{column.name}过滤\n                final String $!{column.name}Key = \"$!{column.name}\";\n                if (StringUtils.isNotBlank((String) queryParams.get($!{column.name}Key))) {\n                    list.add(criteriaBuilder.equal(root.get($!{column.name}Key).as($!{tool.getClsNameByFullName($column.type)}.class), queryParams.get($!{column.name}Key)));\n                }\n#end\n                Predicate[] predicates = new Predicate[list.size()];\n                return criteriaBuilder.and(list.toArray(predicates));\n            }\n        };\n        return $!{tool.firstLowerCase($!{tableInfo.name})}Repository.findAll(specification, pageable);\n    }\n\n    @Override\n    public $!{tableInfo.name} get$!{tableInfo.name}(String id) {\n        Optional<$!{tableInfo.name}> optional = $!{tool.firstLowerCase($!{tableInfo.name})}Repository.findById(id);\n        if (!optional.isPresent()) {\n            throw new RuntimeException();\n        }\n        return optional.get();\n    }\n\n    @Override\n    public $!{tableInfo.name} update$!{tableInfo.name}(String id, $!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        $!{tableInfo.name} raw$!{tableInfo.name} = get$!{tableInfo.name}(id);\n        if (raw$!{tableInfo.name} == null) {\n            throw new RuntimeException(\"请求的id不存在\");\n        }\n        MyBeanUtils.copyNoNullProperties($!{tool.firstLowerCase($!{tableInfo.name})}, raw$!{tableInfo.name});\n        return $!{tool.firstLowerCase($!{tableInfo.name})}Repository.save(raw$!{tableInfo.name});\n    }\n\n}"
        },
        {
          "name": "controller.java",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Controller\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/controller\"))\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;\n\nimport $!{tableInfo.savePackageName}.bean.params.$!{tableInfo.name}Param;\nimport $!{tableInfo.savePackageName}.bean.vo.$!{tableInfo.name}VO;\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiImplicitParam;\nimport io.swagger.annotations.ApiImplicitParams;\nimport io.swagger.annotations.ApiOperation;\nimport org.apache.commons.lang.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表控制层\n *\n * @author $!author\n * @since $!time.currTime(\"yyyy/MM/dd\")\n */\n@Api(\"$!{tableInfo.comment}($!{tableInfo.name})服务\")\n@RestController\n@RequestMapping(\"$!tool.firstLowerCase($tableInfo.name)\")\npublic class $!{tableInfo.name}Controller {\n\n    @Autowired\n    private $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;\n\n    @PostMapping(\"\")\n    @ApiOperation(value = \"创建$!{tableInfo.comment}\", notes = \"创建$!{tableInfo.comment}\")\n    @ApiImplicitParam(name = \"$!tool.firstLowerCase($tableInfo.name)Param\", value = \"$!{tableInfo.comment}入参\", dataType = \"$!{tableInfo.name}Param\", required = true, paramType = \"body\")\n    public $!{tableInfo.name}VO create$!{tableInfo.name}(@RequestBody $!{tableInfo.name}Param $!tool.firstLowerCase($tableInfo.name)Param) {\n        $!{tableInfo.name} $!tool.firstLowerCase($tableInfo.name) = convert($!tool.firstLowerCase($tableInfo.name)Param);\n        return convert($!{tool.firstLowerCase($tableInfo.name)}Service.create$!{tableInfo.name}($!tool.firstLowerCase($tableInfo.name)));\n    }\n\n    @DeleteMapping(\"/{$!pk.name}\")\n    @ApiOperation(value = \"删除$!{tableInfo.comment}\", notes = \"删除$!{tableInfo.comment}\")\n    @ApiImplicitParams(value = {\n            @ApiImplicitParam(name = \"$!pk.name\", value = \"$!{tableInfo.comment}$!pk.name\", dataType = \"$!pk.shortType\", required = true, paramType = \"path\")\n    })\n    public void delete$!{tableInfo.name}(@PathVariable $!pk.shortType $!pk.name) {\n        $!{tool.firstLowerCase($tableInfo.name)}Service.delete$!{tableInfo.name}($!{pk.name});\n    }\n\n    @GetMapping(\"\")\n    @ApiOperation(value = \"获取$!{tableInfo.comment}列表\", notes = \"获取$!{tableInfo.comment}列表\")\n    public List<$!{tableInfo.name}VO> list$!{tableInfo.name}s() {\n        return convert($!{tool.firstLowerCase($tableInfo.name)}Service.list$!{tableInfo.name}s());\n    }\n\n    @GetMapping(\"/{pageNo}/{pageSize}\")\n    @ApiOperation(value = \"获取$!{tableInfo.comment}列表（分页）\", notes = \"获取$!{tableInfo.comment}列表（分页）\")\n    @ApiImplicitParams({\n            @ApiImplicitParam(name = \"pageNo\", value = \"分页第几页，从索引0开始\", paramType = \"path\", required = true),\n            @ApiImplicitParam(name = \"pageSize\", value = \"每页包含的数据量,默认值10\", paramType = \"path\", defaultValue = \"10\", required = true),\n            @ApiImplicitParam(name = \"sortField\", value = \"排序字段,默认值createTime\", paramType = \"query\", defaultValue = \"createTime\"),\n            @ApiImplicitParam(name = \"sortOrder\", value = \"排序方式,默认值desc(降序)\", paramType = \"query\", defaultValue = \"desc\"),\n            @ApiImplicitParam(name = \"params\", value = \"其他查询参数\", paramType = \"query\")})\n    public MoPage<$!{tableInfo.name}VO> listProductsPage(@PathVariable Integer pageNo, @PathVariable Integer pageSize,\n                                           @RequestParam Map<String, Object> params) {\n        // 与分页和排序有关的参数\n        String sortField = StringUtils.defaultIfBlank((String) params.get(\"sortField\"), \"createTime\");\n        sortField = !StringUtils.equalsIgnoreCase(sortField, \"null\") ? sortField : \"createTime\";\n        String sortOrder = StringUtils.defaultIfBlank((String) params.get(\"sortOrder\"), \"\");\n        Sort.Direction direction = StringUtils.equalsIgnoreCase(sortOrder, \"asc\") ? Sort.Direction.ASC : Sort.Direction.DESC;\n        Pageable pageable = PageRequest.of(pageNo, pageSize, direction, sortField);\n        // 其他查询参数\n        Map<String, Object> map = new HashMap<>();\n#foreach($column in $tableInfo.otherColumn)\n        String $!{column.name} = StringUtils.defaultString((String) params.get(\"$!{column.name}\"));\n        map.put(\"$!{column.name}\", $!{column.name});\n#end\n\n        Page<$!{tableInfo.name}> $!{tool.firstLowerCase($tableInfo.name)}Page = $!{tool.firstLowerCase($tableInfo.name)}Service.list$!{tableInfo.name}s(map, pageable);\n        return convert($!tool.firstLowerCase($tableInfo.name)Page);\n    }\n\n    @GetMapping(\"/{$!pk.name}\")\n    @ApiOperation(value = \"获取$!{tableInfo.comment}\", notes = \"根据$!pk.name获取$!{tableInfo.comment}\")\n    @ApiImplicitParams(value = {\n            @ApiImplicitParam(name = \"$!pk.name\", value = \"$!{tableInfo.comment}$!pk.name\", dataType = \"$!pk.shortType\", required = true, paramType = \"path\")\n    })\n    public $!{tableInfo.name}VO get$!{tableInfo.name}(@PathVariable $!pk.shortType $!pk.name) {\n        return convert($!{tool.firstLowerCase($tableInfo.name)}Service.get$!{tableInfo.name}($!pk.name));\n    }\n\n    @PutMapping(\"/{$!pk.name}\")\n    @ApiOperation(value = \"更新$!{tableInfo.comment}\", notes = \"更新$!{tableInfo.comment}\")\n    @ApiImplicitParams(value = {\n            @ApiImplicitParam(name = \"$!pk.name\", value = \"$!{tableInfo.comment}$!pk.name\", dataType = \"$!pk.shortType\", required = true, paramType = \"path\"),\n            @ApiImplicitParam(name = \"$!tool.firstLowerCase($tableInfo.name)Param\", value = \"$!{tableInfo.comment}入参\", dataType = \"$!{tableInfo.name}Param\", required = true, paramType = \"body\")\n    })\n    public $!{tableInfo.name}VO update$!{tableInfo.name}(@PathVariable $!pk.shortType $!pk.name, @RequestBody $!{tableInfo.name}Param $!tool.firstLowerCase($tableInfo.name)Param) {\n        $!{tableInfo.name} $!tool.firstLowerCase($tableInfo.name) = convert($!tool.firstLowerCase($tableInfo.name)Param);\n        return convert($!{tool.firstLowerCase($tableInfo.name)}Service.update$!{tableInfo.name}($!pk.name, $!tool.firstLowerCase($tableInfo.name)));\n    }\n\n    /**\n     * 将$!{tableInfo.comment}入参转化为$!{tableInfo.comment}\n     *\n     * @param $!tool.firstLowerCase($tableInfo.name)Param $!{tableInfo.comment}入参\n     * @return $!{tableInfo.comment}\n     */\n    private $!{tableInfo.name} convert($!{tableInfo.name}Param $!tool.firstLowerCase($tableInfo.name)Param) {\n        return ConvertUtil.convertTo($!tool.firstLowerCase($tableInfo.name)Param, $!{tableInfo.name}.class);\n    }\n\n    /**\n     * 将$!{tableInfo.comment}转化为$!{tableInfo.comment}VO\n     *\n     * @param $!tool.firstLowerCase($tableInfo.name) $!{tableInfo.comment}\n     * @return $!{tableInfo.comment}VO\n     */\n    private $!{tableInfo.name}VO convert($!{tableInfo.name} $!tool.firstLowerCase($tableInfo.name)) {\n        return ConvertUtil.convertTo($!tool.firstLowerCase($tableInfo.name), $!{tableInfo.name}VO.class);\n    }\n\n    /**\n     * 根据Page对象生成MoPage\n     *\n     * @param page 分页\n     * @return MoPage\n     */\n    private MoPage<$!{tableInfo.name}VO> convert(Page<$!{tableInfo.name}> page) {\n        return ConvertUtil.convertTo(page, $!{tableInfo.name}VO.class);\n    }\n\n    /**\n     * 将$!{tableInfo.comment}列表转化为$!{tableInfo.comment}VO列表\n     *\n     * @param list$!{tableInfo.name}s $!{tableInfo.comment}列表\n     * @return $!{tableInfo.comment}VO列表\n     */\n    private List<$!{tableInfo.name}VO> convert(List<$!{tableInfo.name}> list$!{tableInfo.name}s) {\n        return ConvertUtil.convertTo(list$!{tableInfo.name}s, $!{tableInfo.name}VO.class);\n    }\n\n}"
        },
        {
          "name": "param.java",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Param\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/bean/params\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}bean.params;\n\n##使用全局变量实现默认包导入\n$!autoImport\nimport lombok.Data;\n\n##使用宏定义实现类注释信息\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})入参类\n * <p>\n * 封装外部传入的对象数据\n *\n * @author $!author\n * @since $!time.currTime(\"yyyy/MM/dd\")\n */\n@Data\npublic class $!{tableName} {\n    \n#foreach($column in $tableInfo.otherColumn)\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n    \n#end\n}"
        },
        {
          "name": "vo.java",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"VO\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/bean/vo\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}bean.vo;\n\n##使用全局变量实现默认包导入\n$!autoImport\nimport lombok.Data;\n\n##使用宏定义实现类注释信息\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})VO类\n * <p>\n * 封装需要对外暴露的对象数据\n *\n * @author $!author\n * @since $!time.currTime(\"yyyy/MM/dd\")\n */\n@Data\npublic class $!{tableName} {\n    /**\n     * ${pk.comment}\n     */\n    private $!{pk.shortType} $!{pk.name};\n    \n#foreach($column in $tableInfo.otherColumn)\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n    \n#end\n}"
        }
      ]
    },
    "MybatisPlus": {
      "name": "MybatisPlus",
      "elementList": [
        {
          "name": "controller.java.vm",
          "code": "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Controller\")\n\n##保存文件（宏定义）\n#save(\"/controller\", \"Controller.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"controller\")\n\n##定义服务名\n#set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \"Service\"))\n\n##定义实体对象名\n#set($entityName = $!tool.firstLowerCase($!tableInfo.name))\n\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.extension.api.ApiController;\nimport com.baomidou.mybatisplus.extension.api.R;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.annotation.Resource;\nimport java.io.Serializable;\nimport java.util.List;\n\n##表注释（宏定义）\n#tableComment(\"表控制层\")\n@RestController\n@RequestMapping(\"$!tool.firstLowerCase($!tableInfo.name)\")\npublic class $!{tableName} extends ApiController {\n    /**\n     * 服务对象\n     */\n    @Resource\n    private $!{tableInfo.name}Service $!{serviceName};\n\n    /**\n     * 分页查询所有数据\n     *\n     * @param page 分页对象\n     * @param $!entityName 查询实体\n     * @return 所有数据\n     */\n    @GetMapping\n    public R selectAll(Page<$!tableInfo.name> page, $!tableInfo.name $!entityName) {\n        return success(this.$!{serviceName}.page(page, new QueryWrapper<>($!entityName)));\n    }\n\n    /**\n     * 通过主键查询单条数据\n     *\n     * @param id 主键\n     * @return 单条数据\n     */\n    @GetMapping(\"{id}\")\n    public R selectOne(@PathVariable Serializable id) {\n        return success(this.$!{serviceName}.getById(id));\n    }\n\n    /**\n     * 新增数据\n     *\n     * @param $!entityName 实体对象\n     * @return 新增结果\n     */\n    @PostMapping\n    public R insert(@RequestBody $!tableInfo.name $!entityName) {\n        return success(this.$!{serviceName}.save($!entityName));\n    }\n\n    /**\n     * 修改数据\n     *\n     * @param $!entityName 实体对象\n     * @return 修改结果\n     */\n    @PutMapping\n    public R update(@RequestBody $!tableInfo.name $!entityName) {\n        return success(this.$!{serviceName}.updateById($!entityName));\n    }\n\n    /**\n     * 删除数据\n     *\n     * @param idList 主键结合\n     * @return 删除结果\n     */\n    @DeleteMapping\n    public R delete(@RequestParam(\"idList\") List<Long> idList) {\n        return success(this.$!{serviceName}.removeByIds(idList));\n    }\n}\n"
        },
        {
          "name": "dao.java.vm",
          "code": "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Dao\")\n\n##保存文件（宏定义）\n#save(\"/dao\", \"Dao.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"dao\")\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\n\n##表注释（宏定义）\n#tableComment(\"表数据库访问层\")\npublic interface $!{tableName} extends BaseMapper<$!tableInfo.name> {\n\n}\n"
        },
        {
          "name": "entity.java.vm",
          "code": "##导入宏定义\n$!{define.vm}\n\n##保存文件（宏定义）\n#save(\"/entity\", \".java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"entity\")\n\n##自动导入包（全局变量）\n$!{autoImport.vm}\nimport com.baomidou.mybatisplus.extension.activerecord.Model;\nimport java.io.Serializable;\n\n##表注释（宏定义）\n#tableComment(\"表实体类\")\n@SuppressWarnings(\"serial\")\npublic class $!{tableInfo.name} extends Model<$!{tableInfo.name}> {\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})//${column.comment}#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n#foreach($column in $tableInfo.fullColumn)\n#getSetMethod($column)\n#end\n\n#foreach($column in $tableInfo.pkColumn)\n    /**\n     * 获取主键值\n     *\n     * @return 主键值\n     */\n    @Override\n    protected Serializable pkVal() {\n        return this.$!column.name;\n    }\n    #break\n#end\n}\n"
        },
        {
          "name": "service.java.vm",
          "code": "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Service\")\n\n##保存文件（宏定义）\n#save(\"/service\", \"Service.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"service\")\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\n\n##表注释（宏定义）\n#tableComment(\"表服务接口\")\npublic interface $!{tableName} extends IService<$!tableInfo.name> {\n\n}\n"
        },
        {
          "name": "serviceImpl.java.vm",
          "code": "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"ServiceImpl\")\n\n##保存文件（宏定义）\n#save(\"/service/impl\", \"ServiceImpl.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"service.impl\")\n\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.stereotype.Service;\n\n##表注释（宏定义）\n#tableComment(\"表服务实现类\")\n@Service(\"$!tool.firstLowerCase($tableInfo.name)Service\")\npublic class $!{tableName} extends ServiceImpl<$!{tableInfo.name}Dao, $!{tableInfo.name}> implements $!{tableInfo.name}Service {\n\n}\n"
        }
      ]
    },
    "Default": {
      "name": "Default",
      "elementList": [
        {
          "name": "controller.java.vm",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Controller\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/controller\"))\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.annotation.Resource;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表控制层\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@RestController\n@RequestMapping(\"$!tool.firstLowerCase($tableInfo.name)\")\npublic class $!{tableName} {\n    /**\n     * 服务对象\n     */\n    @Resource\n    private $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;\n\n    /**\n     * 分页查询\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} 筛选条件\n     * @param pageRequest      分页对象\n     * @return 查询结果\n     */\n    @GetMapping\n    public ResponseEntity<Page<$!{tableInfo.name}>> queryByPage($!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}, PageRequest pageRequest) {\n        return ResponseEntity.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.queryByPage($!{tool.firstLowerCase($tableInfo.name)}, pageRequest));\n    }\n\n    /**\n     * 通过主键查询单条数据\n     *\n     * @param id 主键\n     * @return 单条数据\n     */\n    @GetMapping(\"{id}\")\n    public ResponseEntity<$!{tableInfo.name}> queryById(@PathVariable(\"id\") $!pk.shortType id) {\n        return ResponseEntity.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.queryById(id));\n    }\n\n    /**\n     * 新增数据\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} 实体\n     * @return 新增结果\n     */\n    @PostMapping\n    public ResponseEntity<$!{tableInfo.name}> add($!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}) {\n        return ResponseEntity.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.insert($!{tool.firstLowerCase($tableInfo.name)}));\n    }\n\n    /**\n     * 编辑数据\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} 实体\n     * @return 编辑结果\n     */\n    @PutMapping\n    public ResponseEntity<$!{tableInfo.name}> edit($!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}) {\n        return ResponseEntity.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.update($!{tool.firstLowerCase($tableInfo.name)}));\n    }\n\n    /**\n     * 删除数据\n     *\n     * @param id 主键\n     * @return 删除是否成功\n     */\n    @DeleteMapping\n    public ResponseEntity<Boolean> deleteById($!pk.shortType id) {\n        return ResponseEntity.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.deleteById(id));\n    }\n\n}\n"
        },
        {
          "name": "dao.java.vm",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Dao\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/dao\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dao;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport org.apache.ibatis.annotations.Param;\nimport org.springframework.data.domain.Pageable;\nimport java.util.List;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表数据库访问层\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} {\n\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param $!pk.name 主键\n     * @return 实例对象\n     */\n    $!{tableInfo.name} queryById($!pk.shortType $!pk.name);\n\n    /**\n     * 查询指定行数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 查询条件\n     * @param pageable         分页对象\n     * @return 对象列表\n     */\n    List<$!{tableInfo.name}> queryAllByLimit($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}), @Param(\"pageable\") Pageable pageable);\n\n    /**\n     * 统计总行数\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 查询条件\n     * @return 总行数\n     */\n    long count($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 新增数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 影响行数\n     */\n    int insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 批量新增数据（MyBatis原生foreach方法）\n     *\n     * @param entities List<$!{tableInfo.name}> 实例对象列表\n     * @return 影响行数\n     */\n    int insertBatch(@Param(\"entities\") List<$!{tableInfo.name}> entities);\n\n    /**\n     * 批量新增或按主键更新数据（MyBatis原生foreach方法）\n     *\n     * @param entities List<$!{tableInfo.name}> 实例对象列表\n     * @return 影响行数\n     * @throws org.springframework.jdbc.BadSqlGrammarException 入参是空List的时候会抛SQL语句错误的异常，请自行校验入参\n     */\n    int insertOrUpdateBatch(@Param(\"entities\") List<$!{tableInfo.name}> entities);\n\n    /**\n     * 修改数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 影响行数\n     */\n    int update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 通过主键删除数据\n     *\n     * @param $!pk.name 主键\n     * @return 影响行数\n     */\n    int deleteById($!pk.shortType $!pk.name);\n\n}\n"
        },
        {
          "name": "debug.json.vm",
          "code": "// 禁止将生成结果写入到文件\n$!callback.setWriteFile(false)\n\n//调试表原始对象\n$!tool.debug($tableInfo.obj)\n\n//调试列原始对象\n$!tool.debug($tableInfo.fullColumn.get(0).obj)\n\n//调试列原始列类型\n$!tool.debug($tableInfo.fullColumn.get(0).obj.dataType)\n\n//获取原始列类型中的字段\nsqlType = $!tool.getField($tableInfo.fullColumn.get(0).obj.dataType, \"typeName\")\n\n//执行原始列类型中的方法\nsqlTypeLen = $!tableInfo.fullColumn.get(0).obj.dataType.getLength()\n"
        },
        {
          "name": "entity.java.vm",
          "code": "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/entity\", \".java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"entity\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport java.io.Serializable;\n\n##使用宏定义实现类注释信息\n#tableComment(\"实体类\")\npublic class $!{tableInfo.name} implements Serializable {\n    private static final long serialVersionUID = $!tool.serial();\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n#foreach($column in $tableInfo.fullColumn)\n##使用宏定义实现get,set方法\n#getSetMethod($column)\n#end\n\n}\n"
        },
        {
          "name": "mapper.xml.vm",
          "code": "##引入mybatis支持\n$!{mybatisSupport.vm}\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Dao.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao\">\n\n    <resultMap type=\"$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}\" id=\"$!{tableInfo.name}Map\">\n#foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\" jdbcType=\"$!column.ext.jdbcType\"/>\n#end\n    </resultMap>\n\n    <!--查询单个-->\n    <select id=\"queryById\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n        where $!pk.obj.name = #{$!pk.name}\n    </select>\n\n    <!--查询指定行数据-->\n    <select id=\"queryAllByLimit\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n        <where>\n#foreach($column in $tableInfo.fullColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                and $!column.obj.name = #{$!column.name}\n            </if>\n#end\n        </where>\n        limit #{pageable.offset}, #{pageable.pageSize}\n    </select>\n\n    <!--统计总行数-->\n    <select id=\"count\" resultType=\"java.lang.Long\">\n        select count(1)\n        from $!tableInfo.obj.name\n        <where>\n#foreach($column in $tableInfo.fullColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                and $!column.obj.name = #{$!column.name}\n            </if>\n#end\n        </where>\n    </select>\n\n    <!--新增所有列-->\n    <insert id=\"insert\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values (#foreach($column in $tableInfo.otherColumn)#{$!{column.name}}#if($velocityHasNext), #end#end)\n    </insert>\n\n    <insert id=\"insertBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n        (#foreach($column in $tableInfo.otherColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n    </insert>\n\n    <insert id=\"insertOrUpdateBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n            (#foreach($column in $tableInfo.otherColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n        on duplicate key update\n        #foreach($column in $tableInfo.otherColumn)$!column.obj.name = values($!column.obj.name)#if($velocityHasNext),\n        #end#end\n\n    </insert>\n\n    <!--通过主键修改数据-->\n    <update id=\"update\">\n        update $!{tableInfo.obj.name}\n        <set>\n#foreach($column in $tableInfo.otherColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                $!column.obj.name = #{$!column.name},\n            </if>\n#end\n        </set>\n        where $!pk.obj.name = #{$!pk.name}\n    </update>\n\n    <!--通过主键删除-->\n    <delete id=\"deleteById\">\n        delete from $!{tableInfo.obj.name} where $!pk.obj.name = #{$!pk.name}\n    </delete>\n\n</mapper>\n"
        },
        {
          "name": "service.java.vm",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Service\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务接口\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} {\n\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param $!pk.name 主键\n     * @return 实例对象\n     */\n    $!{tableInfo.name} queryById($!pk.shortType $!pk.name);\n\n    /**\n     * 分页查询\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 筛选条件\n     * @param pageRequest      分页对象\n     * @return 查询结果\n     */\n    Page<$!{tableInfo.name}> queryByPage($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}), PageRequest pageRequest);\n\n    /**\n     * 新增数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 实例对象\n     */\n    $!{tableInfo.name} insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 修改数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 实例对象\n     */\n    $!{tableInfo.name} update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 通过主键删除数据\n     *\n     * @param $!pk.name 主键\n     * @return 是否成功\n     */\n    boolean deleteById($!pk.shortType $!pk.name);\n\n}"
        },
        {
          "name": "serviceImpl.java.vm",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"ServiceImpl\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service/impl\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.stereotype.Service;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageImpl;\nimport org.springframework.data.domain.PageRequest;\n\nimport javax.annotation.Resource;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务实现类\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Service(\"$!tool.firstLowerCase($!{tableInfo.name})Service\")\npublic class $!{tableName} implements $!{tableInfo.name}Service {\n    @Resource\n    private $!{tableInfo.name}Dao $!tool.firstLowerCase($!{tableInfo.name})Dao;\n\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param $!pk.name 主键\n     * @return 实例对象\n     */\n    @Override\n    public $!{tableInfo.name} queryById($!pk.shortType $!pk.name) {\n        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.queryById($!pk.name);\n    }\n\n    /**\n     * 分页查询\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} 筛选条件\n     * @param pageRequest      分页对象\n     * @return 查询结果\n     */\n    @Override\n    public Page<$!{tableInfo.name}> queryByPage($!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}, PageRequest pageRequest) {\n        long total = this.$!{tool.firstLowerCase($tableInfo.name)}Dao.count($!{tool.firstLowerCase($tableInfo.name)});\n        return new PageImpl<>(this.$!{tool.firstLowerCase($tableInfo.name)}Dao.queryAllByLimit($!{tool.firstLowerCase($tableInfo.name)}, pageRequest), pageRequest, total);\n    }\n\n    /**\n     * 新增数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 实例对象\n     */\n    @Override\n    public $!{tableInfo.name} insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.insert($!tool.firstLowerCase($!{tableInfo.name}));\n        return $!tool.firstLowerCase($!{tableInfo.name});\n    }\n\n    /**\n     * 修改数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 实例对象\n     */\n    @Override\n    public $!{tableInfo.name} update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.update($!tool.firstLowerCase($!{tableInfo.name}));\n        return this.queryById($!{tool.firstLowerCase($!{tableInfo.name})}.get$!tool.firstUpperCase($pk.name)());\n    }\n\n    /**\n     * 通过主键删除数据\n     *\n     * @param $!pk.name 主键\n     * @return 是否成功\n     */\n    @Override\n    public boolean deleteById($!pk.shortType $!pk.name) {\n        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.deleteById($!pk.name) > 0;\n    }\n}"
        }
      ]
    },
    "spring-data-mongodb": {
      "name": "spring-data-mongodb",
      "elementList": [
        {
          "name": "controller.java.vm",
          "code": "##导入宏定义、设置包名、类名、文件名##导入宏定义\n$!{define.vm}\n#setPackageSuffix(\"controller\")\n#setTableSuffix(\"Controller\")\n#save(\"/controller\", \"Controller.java\")\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n##定义服务名\n#set($serviceSortType = $!tool.append($!tableInfo.name, \"Service\"))\n#set($serviceType = $!tool.append($!tableInfo.savePackageName, \".service.\", $serviceSortType))\n#set($serviceVarName = $!tool.firstLowerCase($serviceSortType))\n\n#set($entityShortType = $!tableInfo.name)\n#set($entityType = $!tableInfo.psiClassObj.getQualifiedName())\n#set($entityVarName = $!tool.firstLowerCase($!tableInfo.name))\n#set($pkType = $!pk.type)\n\nimport $pkType;\nimport $entityType;\nimport $serviceType;\nimport lombok.AllArgsConstructor;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n\n/**\n * $!{tableInfo.comment}控制层\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@RestController\n@RequestMapping(\"/$!tool.firstLowerCase($!tableInfo.name)\")\n@AllArgsConstructor\npublic class $!{tableName} {\n\n\tprivate $serviceSortType $serviceVarName;\n\n\t/**\n\t * 获取$!{tableInfo.comment}列表(分页)\n\t */\n\t@GetMapping(\"/list\")\n\tpublic Page<$entityShortType> list(Pageable page) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * 获取$!{tableInfo.comment}\n\t */\n\t@GetMapping(\"/get\")\n\tpublic $entityShortType get($!pk.shortType id) {\n\t\treturn ${serviceVarName}.findById(id);\n\t}\n\n\t/**\n\t * 添加$!{tableInfo.comment}\n\t */\n\t@PostMapping(\"/add\")\n\tpublic void add(@RequestBody $entityShortType $entityVarName) {\n\t\t${serviceVarName}.save($entityVarName);\n\t}\n\n\n\t/**\n\t * 修改$!{tableInfo.comment}\n\t */\n\t@PostMapping(\"/update\")\n\tpublic void update(@RequestBody $entityShortType $entityVarName) {\n\t\t${serviceVarName}.save($entityVarName);\n\t}\n\n\t/**\n\t * 删除$!{tableInfo.comment}\n\t */\n\t@PostMapping(\"/delete\")\n\tpublic void delete($!pk.shortType id) {\n\t\t${serviceVarName}.deleteById(id);\n\t}\n\n}\n"
        },
        {
          "name": "entity.java.vm",
          "code": "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/entity\", \".java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"entity\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport java.io.Serializable;\n\n##使用宏定义实现类注释信息\n#tableComment(\"实体类\")\npublic class $!{tableInfo.name} implements Serializable {\n    private static final long serialVersionUID = $!tool.serial();\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n#foreach($column in $tableInfo.fullColumn)\n##使用宏定义实现get,set方法\n#getSetMethod($column)\n#end\n\n}\n"
        },
        {
          "name": "repository.java.vm",
          "code": "##导入宏定义、设置包名、类名、文件名##导入宏定义\n$!{define.vm}\n#setPackageSuffix(\"repository\")\n#setTableSuffix(\"Repository\")\n#save(\"/repository\", \"Repository.java\")\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n##实体类名、主键类名\n#set($entityShortType = $!tableInfo.name)\n#set($entityType = $!tableInfo.psiClassObj.getQualifiedName())\n#set($pkShortType = $!pk.shortType)\n#set($pkType = $!pk.type)\n\nimport $pkType;\nimport $entityType;\nimport org.springframework.data.mongodb.repository.MongoRepository;\n\n\n/**\n * $!{tableInfo.comment}持久层\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} extends MongoRepository<$entityShortType, $pkShortType> {\n\n}\n"
        },
        {
          "name": "service.java.vm",
          "code": "##导入宏定义、设置包名、类名、文件名##导入宏定义\n$!{define.vm}\n#setPackageSuffix(\"service\")\n#setTableSuffix(\"Service\")\n#save(\"/service\", \"Service.java\")\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n##实体类名、主键类名\n#set($entityShortType = $!tableInfo.name)\n#set($entityType = $!tableInfo.psiClassObj.getQualifiedName())\n#set($entityVarName = $!tool.firstLowerCase($!tableInfo.name))\n#set($pkShortType = $!pk.shortType)\n#set($pkType = $!pk.type)\n\nimport $pkType;\nimport $entityType;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport java.util.Collection;\nimport java.util.List;\n\n\n/**\n * $!{tableInfo.comment}业务层\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} {\n\n    void save($entityShortType $entityVarName);\n\n    void deleteById($pkShortType id);\n\n    $entityShortType findById($pkShortType id);\n\n    List<$entityShortType> findById(Collection<$pkShortType> ids);\n\n    Page<$entityShortType> list(Pageable page);\n\n}\n"
        },
        {
          "name": "serviceImpl.java.vm",
          "code": "##导入宏定义、设置包名、类名、文件名\n$!{define.vm}\n#setPackageSuffix(\"service.impl\")\n#setTableSuffix(\"ServiceImpl\")\n#save(\"/service/impl\", \"ServiceImpl.java\")\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n##业务层类名、持久层类名、实体名\n#set($serviceSortType = $!tool.append($!tableInfo.name, \"Service\"))\n#set($serviceType = $!tool.append($!tableInfo.savePackageName, \".service.\", $serviceSortType))\n#set($repositorySortType = $!tool.append($!tableInfo.name, \"Repository\"))\n#set($repositoryType = $!tool.append($!tableInfo.savePackageName, \".repository.\", $repositorySortType))\n#set($repositoryVarName = $!tool.firstLowerCase($!repositorySortType))\n#set($entityShortType = $!tableInfo.name)\n#set($entityType = $!tableInfo.psiClassObj.getQualifiedName())\n#set($entityVarName = $!tool.firstLowerCase($!tableInfo.name))\n#set($pkShortType = $!pk.shortType)\n#set($pkType = $!pk.type)\n\nimport $pkType;\nimport $entityType;\nimport $serviceType;\nimport $repositoryType;\nimport org.springframework.stereotype.Service;\nimport javax.annotation.Resource;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.StreamSupport;\n\n\n/**\n * $!{tableInfo.comment}业务层\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Service\npublic class $!{tableName} implements $!serviceSortType {\n\n\t@Resource\n    private $repositorySortType $repositoryVarName;\n\n    @Override\n    public void save($entityShortType $entityVarName) {\n        $!{repositoryVarName}.save($entityVarName);\n    }\n\n    @Override\n    public void deleteById($pkShortType id) {\n        $!{repositoryVarName}.delete(id);\n    }\n\n    @Override\n    public $entityShortType findById($pkShortType id) {\n        return $!{repositoryVarName}.findOne(id);\n    }\n\n    @Override\n    public List<$entityShortType> findById(Collection<$pkShortType> ids) {\n        Iterable<$entityShortType> iterable = $!{repositoryVarName}.findAll(ids);\n        return StreamSupport.stream(iterable.spliterator(), false)\n                .collect(Collectors.toList());\n    }\n\n    @Override\n    public Page<$entityShortType> list(Pageable page) {\n        return $!{repositoryVarName}.findAll(page);\n    }\n\n}\n"
        }
      ]
    },
    "angular": {
      "name": "angular",
      "elementList": [
        {
          "name": "module.ts",
          "code": "##引入宏定义\n$!angularDefine\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/$!tool.firstLowerCase($!{tableInfo.name})\", \".module.ts\")\n\n##使用宏定义实现类注释信息\n##tableComment(\"实体类\")\n\nimport {NgModule} from '@angular/core';\n\nimport {$!{tableInfo.name}RoutingModule} from './$!tool.firstLowerCase($!{tableInfo.name})-routing.module';\nimport {SharedModule} from '../../shared/shared.module';\nimport {$!{tableInfo.name}CreateComponent} from './$!tool.firstLowerCase($!{tableInfo.name})-create/$!tool.firstLowerCase($!{tableInfo.name})-create.component';\nimport {$!{tableInfo.name}UpdateComponent} from './$!tool.firstLowerCase($!{tableInfo.name})-update/$!tool.firstLowerCase($!{tableInfo.name})-update.component';\nimport {$!{tableInfo.name}ListComponent} from './$!tool.firstLowerCase($!{tableInfo.name})-list/$!tool.firstLowerCase($!{tableInfo.name})-list.component';\n\n@NgModule({\n  declarations: [$!{tableInfo.name}CreateComponent, $!{tableInfo.name}UpdateComponent, $!{tableInfo.name}ListComponent],\n  imports: [\n    SharedModule,\n    $!{tableInfo.name}RoutingModule\n  ]\n})\nexport class $!{tableInfo.name}Module {\n}"
        },
        {
          "name": "routing.module.ts",
          "code": "##引入宏定义\n$!angularDefine\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/$!tool.firstLowerCase($!{tableInfo.name})\", \"-routing.module.ts\")\n\n##使用宏定义实现类注释信息\n##tableComment(\"实体类\")\n\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { $!{tableInfo.name}ListComponent } from './$!tool.firstLowerCase($!{tableInfo.name})-list/$!tool.firstLowerCase($!{tableInfo.name})-list.component';\n\nconst routes: Routes = [\n  {path: '', component: $!{tableInfo.name}ListComponent},\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class $!{tableInfo.name}RoutingModule { }"
        },
        {
          "name": "service.ts",
          "code": "##引入宏定义\n$!angularDefine\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/$!tool.firstLowerCase($!{tableInfo.name})\", \".service.ts\")\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\nimport {$!{tableInfo.name}} from '../../domain/$!tool.append($!tool.firstLowerCase($!{tableInfo.name}),\".model\")';\nimport {$!{tableInfo.name}Page} from '../../domain/$!tool.append($!tool.firstLowerCase($!{tableInfo.name}),\".page\")';\n\nconst httpOptions = {\n  headers: new HttpHeaders({'Content-Type': 'application/json'})\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class $!{tableInfo.name}Service {\n\n  constructor(private http: HttpClient) {\n  }\n\n\n  /**\n   * 创建$!{tableInfo.comment}\n   *\n   * @param $!tool.firstLowerCase($!{tableInfo.name}) $!{tableInfo.comment}\n   * @return $!{tableInfo.comment}\n   */\n  create$!{tableInfo.name}($!tool.firstLowerCase($!{tableInfo.name}): $!{tableInfo.name}): Observable<any> {\n    const url = '/mo/v1/$!tool.firstLowerCase($!{tableInfo.name})';\n    return this.http.post(url, JSON.stringify($!tool.firstLowerCase($!{tableInfo.name})), httpOptions);\n  }\n\n  /**\n   * 删除$!{tableInfo.comment}\n   *\n   * @param id $!{tableInfo.comment}的id\n   */\n  delete$!{tableInfo.name}(id: string): Observable<any> {\n    const url = '/mo/v1/$!tool.firstLowerCase($!{tableInfo.name})/' + id;\n    return this.http.delete(url);\n  }\n\n  /**\n   * 获取$!{tableInfo.comment}列表\n   *\n   * @return $!{tableInfo.comment}列表\n   */\n  list$!{tableInfo.name}s(): Observable<$!{tableInfo.name}[]> {\n    const url = '/mo/v1/$!tool.firstLowerCase($!{tableInfo.name})';\n    return this.http.get<$!{tableInfo.name}[]>(url);\n  }\n\n  /**\n   * 获取$!{tableInfo.comment}列表（根据过滤条件）\n   *\n   * @return $!{tableInfo.comment}列表\n   */\n  query$!{tableInfo.name}s(\n    pageIndex: number,\n    pageSize: number,\n    sortField: string | null,\n    sortOrder: string | null,\n    filters: Array<{ key: string; value: string[] }>\n  ): Observable<$!{tableInfo.name}Page> {\n    // 由于表格分页组件默认从1开始，为了兼容，人为减1\n    pageIndex = pageIndex > 0 ? pageIndex - 1 : 0;\n    let params = new HttpParams()\n      .append('page', `${pageIndex}`)\n      .append('results', `${pageSize}`)\n      .append('sortField', `${sortField}`)\n      .append('sortOrder', `${sortOrder}`);\n    filters.forEach(filter => {\n      filter.value.forEach(value => {\n        params = params.append(filter.key, value);\n      });\n    });\n    const url = '/mo/v1/$!tool.firstLowerCase($!{tableInfo.name})/' + pageIndex + '/' + pageSize;\n    return this.http.get<$!{tableInfo.name}Page>(url, {params});\n  }\n\n  /**\n   * 更新$!{tableInfo.comment}\n   *\n   * @param id $!{tableInfo.comment}的id\n   * @param $!tool.firstLowerCase($!{tableInfo.name}) $!{tableInfo.comment}\n   * @return $!{tableInfo.comment}\n   */\n  update$!{tableInfo.name}(id: string, $!tool.firstLowerCase($!{tableInfo.name}): $!{tableInfo.name}): Observable<$!{tableInfo.name}> {\n    const url = '/mo/v1/$!tool.firstLowerCase($!{tableInfo.name})/' + id;\n    return this.http.put<$!{tableInfo.name}>(url, JSON.stringify($!tool.firstLowerCase($!{tableInfo.name})), httpOptions);\n  }\n\n}"
        },
        {
          "name": "model.ts",
          "code": "##引入宏定义\n$!angularDefine\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/domain\", \".model.ts\")\n\n##使用宏定义实现类注释信息\n#tableComment(\"模型\")\nexport interface $!{tableInfo.name} {\n\n#foreach($column in $tableInfo.fullColumn)\n  #if(${column.comment})/**\n    * ${column.comment}\n    */#end\n\n  $!{column.name}?: $!{tool.getClsNameByFullName($column.type)};\n#end\n}"
        },
        {
          "name": "create.component.ts",
          "code": "##引入宏定义\n$!angularDefine\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/$!tool.firstLowerCase($!{tableInfo.name})/$!tool.firstLowerCase($!{tableInfo.name})-create\", \"-create.component.ts\")\n\nimport {Component, Input, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {$!{tableInfo.name}} from '../../../domain/$!tool.append($!tool.firstLowerCase($!{tableInfo.name}),\".model\")';\nimport {FormUtil} from '../../../utils/form.util';\n\n@Component({\n  selector: 'app-$!tool.firstLowerCase($!{tableInfo.name})-create',\n  templateUrl: './$!tool.firstLowerCase($!{tableInfo.name})-create.component.html',\n  styleUrls: ['./$!tool.firstLowerCase($!{tableInfo.name})-create.component.css']\n})\nexport class $!{tableInfo.name}CreateComponent implements OnInit {\n\n  @Input() data?: any;\n\n  validateForm!: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private formUtil: FormUtil\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.validateForm = this.fb.group({\n#foreach($column in $tableInfo.otherColumn)\n  $!{column.name}: [null, [Validators.required]],\n#end\n    });\n  }\n\n  /**\n   * 校验表单\n   */\n  isValidForm(): boolean {\n    return this.formUtil.isValidForm(this.validateForm);\n  }\n\n  /**\n   * 获取表单数据并进行处理\n   */\n  getFormData(): $!{tableInfo.name} {\n    let data: $!{tableInfo.name} = {};\n    data = this.formUtil.getFormData(data, this.validateForm);\n    return data;\n  }\n\n}"
        },
        {
          "name": "create.component.html",
          "code": "##引入宏定义\n$!angularDefine\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/$!tool.firstLowerCase($!{tableInfo.name})/$!tool.firstLowerCase($!{tableInfo.name})-create\", \"-create.component.html\")\n\n<form nz-form [formGroup]=\"validateForm\">\n\n#foreach($column in $tableInfo.otherColumn)\n  <nz-form-item>\n    <nz-form-label [nzSm]=\"6\" [nzXs]=\"24\" nzFor=\"$!{column.name}\" nzRequired>$!{column.comment}</nz-form-label>\n    <nz-form-control [nzSm]=\"14\" [nzXs]=\"24\" nzHasFeedback [nzErrorTip]=\"$!{column.name}ErrorTpl\">\n\n      <input nz-input id=\"$!{column.name}\" formControlName=\"$!{column.name}\"/>\n      <ng-template #$!{column.name}ErrorTpl let-control>\n        <ng-container *ngIf=\"control.hasError('required')\">\n          请输入${column.comment}!\n        </ng-container>\n        <ng-container *ngIf=\"control.hasError('pattern')\">\n          只能包含中文、数字、字母和特殊字符中的\"-\"\n        </ng-container>\n        <ng-container *ngIf=\"control.hasError('maxlength')\">\n          长度过长\n        </ng-container>\n      </ng-template>\n\n    </nz-form-control>\n  </nz-form-item>\n\n#end\n\n</form>"
        },
        {
          "name": "create.component.css",
          "code": "##引入宏定义\n$!angularDefine\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/$!tool.firstLowerCase($!{tableInfo.name})/$!tool.firstLowerCase($!{tableInfo.name})-create\", \"-create.component.css\")"
        },
        {
          "name": "update.component.ts",
          "code": "##引入宏定义\n$!angularDefine\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/$!tool.firstLowerCase($!{tableInfo.name})/$!tool.firstLowerCase($!{tableInfo.name})-update\", \"-update.component.ts\")\n\nimport {Component, Input, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {NzModalRef} from 'ng-zorro-antd';\nimport {$!{tableInfo.name}} from '../../../domain/$!tool.append($!tool.firstLowerCase($!{tableInfo.name}),\".model\")';\nimport {FormUtil} from '../../../utils/form.util';\n\n@Component({\n  selector: 'app-$!tool.firstLowerCase($!{tableInfo.name})-update',\n  templateUrl: './$!tool.firstLowerCase($!{tableInfo.name})-update.component.html',\n  styleUrls: ['./$!tool.firstLowerCase($!{tableInfo.name})-update.component.css']\n})\nexport class $!{tableInfo.name}UpdateComponent implements OnInit {\n\n  @Input() data?: $!{tableInfo.name};\n\n  validateForm!: FormGroup;\n\n  constructor(private fb: FormBuilder,\n              private formUtil: FormUtil,\n              private modal: NzModalRef) {\n  }\n\n  ngOnInit(): void {\n    this.validateForm = this.fb.group({\n#foreach($column in $tableInfo.otherColumn)\n  $!{column.name}: [this.data.$!{column.name}, [Validators.required]],\n#end\n    });\n  }\n\n\n  isValidForm(): boolean {\n    return this.formUtil.isValidForm(this.validateForm);\n  }\n\n\n  getFormData(): $!{tableInfo.name} {\n    const data: $!{tableInfo.name} = this.formUtil.getFormData(this.data, this.validateForm);\n    return data;\n  }\n\n}"
        },
        {
          "name": "update.component.html",
          "code": "##引入宏定义\n$!angularDefine\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/$!tool.firstLowerCase($!{tableInfo.name})/$!tool.firstLowerCase($!{tableInfo.name})-update\", \"-update.component.html\")\n\n<form nz-form [formGroup]=\"validateForm\">\n\n#foreach($column in $tableInfo.otherColumn)\n  <nz-form-item>\n    <nz-form-label [nzSm]=\"6\" [nzXs]=\"24\" nzFor=\"$!{column.name}\" nzRequired>$!{column.comment}</nz-form-label>\n    <nz-form-control [nzSm]=\"14\" [nzXs]=\"24\" nzHasFeedback [nzErrorTip]=\"$!{column.name}ErrorTpl\">\n\n      <input nz-input id=\"$!{column.name}\" formControlName=\"$!{column.name}\"/>\n      <ng-template #$!{column.name}ErrorTpl let-control>\n        <ng-container *ngIf=\"control.hasError('required')\">\n          请输入${column.comment}!\n        </ng-container>\n        <ng-container *ngIf=\"control.hasError('pattern')\">\n          只能包含中文、数字、字母和特殊字符中的\"-\"\n        </ng-container>\n        <ng-container *ngIf=\"control.hasError('maxlength')\">\n          长度过长\n        </ng-container>\n      </ng-template>\n\n    </nz-form-control>\n  </nz-form-item>\n\n#end\n\n</form>"
        },
        {
          "name": "update.component.css",
          "code": "##引入宏定义\n$!angularDefine\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/$!tool.firstLowerCase($!{tableInfo.name})/$!tool.firstLowerCase($!{tableInfo.name})-update\", \"-update.component.css\")"
        },
        {
          "name": "list.component.ts",
          "code": "##引入宏定义\n$!angularDefine\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/$!tool.firstLowerCase($!{tableInfo.name})/$!tool.firstLowerCase($!{tableInfo.name})-list\", \"-list.component.ts\")\n\nimport {Component, OnInit, ViewContainerRef} from '@angular/core';\nimport {$!{tableInfo.name}} from '../../../domain/$!tool.append($!tool.firstLowerCase($!{tableInfo.name}),\".model\")';\nimport {$!{tableInfo.name}Service} from '../$!tool.append($!tool.firstLowerCase($!{tableInfo.name}),\".service\")';\nimport {$!{tableInfo.name}CreateComponent} from '../$!tool.firstLowerCase($!{tableInfo.name})-create/$!tool.firstLowerCase($!{tableInfo.name})-create.component';\nimport {$!{tableInfo.name}UpdateComponent} from '../$!tool.firstLowerCase($!{tableInfo.name})-update/$!tool.firstLowerCase($!{tableInfo.name})-update.component';\nimport {NzMessageService} from 'ng-zorro-antd';\nimport {FormBuilder} from '@angular/forms';\nimport {NzModalService} from 'ng-zorro-antd/modal';\nimport {NzTableQueryParams} from 'ng-zorro-antd/table';\n\n@Component({\n  selector: 'app-$!tool.firstLowerCase($!{tableInfo.name})-list',\n  templateUrl: './$!tool.firstLowerCase($!{tableInfo.name})-list.component.html',\n  styleUrls: ['./$!tool.firstLowerCase($!{tableInfo.name})-list.component.css']\n})\nexport class $!{tableInfo.name}ListComponent implements OnInit {\n\n  // 搜索框中的查询条件\n  queryParamValue = '';\n\n  // 表单数据集合\n  listOfData: $!{tableInfo.name}[];\n  // 表单数据的总数\n  total = 1;\n  // 表单分页的大小\n  pageSize = 10;\n  // 表单分页的页数\n  pageIndex = 1;\n  // 表单是否在加载中\n  loading = true;\n\n  constructor(private fb: FormBuilder,\n              private service: $!{tableInfo.name}Service,\n              private modal: NzModalService,\n              private message: NzMessageService,\n              private viewContainerRef: ViewContainerRef) {\n  }\n\n  ngOnInit(): void {\n    this.refreshData();\n  }\n\n\n  /**\n   * 创建添加对话框\n   */\n  createAddModal(): void {\n\n    const modal = this.modal.create({\n      nzTitle: '添加$!{tableInfo.comment}',\n      nzContent: $!{tableInfo.name}CreateComponent,\n      nzViewContainerRef: this.viewContainerRef,\n      nzComponentParams: {\n        data: '',\n      },\n      nzOnOk: (componentInstance: $!{tableInfo.name}CreateComponent) => {\n        const isValid: boolean = componentInstance.isValidForm();\n        if (isValid) {\n          const result: $!{tableInfo.name} = componentInstance.getFormData();\n          this.create$!{tableInfo.name}(result);\n          return result;\n        }\n        return false;\n      }\n\n    });\n    modal.afterOpen.subscribe(() => console.log('[afterOpen] emitted!'));\n    // Return a result when closed\n    modal.afterClose.subscribe(result => {\n      console.log('[afterClose] The result is:', result);\n    });\n\n  }\n\n  /**\n   * 创建编辑对话框\n   */\n  createEditModal($!tool.firstLowerCase($!{tableInfo.name}): any): void {\n\n    const modal = this.modal.create({\n      nzTitle: '编辑$!{tableInfo.comment}',\n      nzContent: $!{tableInfo.name}UpdateComponent,\n      nzViewContainerRef: this.viewContainerRef,\n      nzComponentParams: {\n        data: $!tool.firstLowerCase($!{tableInfo.name}),\n      },\n      nzOnOk: (componentInstance: $!{tableInfo.name}UpdateComponent) => {\n        const isValid: boolean = componentInstance.isValidForm();\n        if (isValid) {\n          const result: $!{tableInfo.name} = componentInstance.getFormData();\n          this.update$!{tableInfo.name}(result.id, result);\n          return result;\n        }\n        return false;\n      }\n    });\n    modal.afterOpen.subscribe(() => console.log('[afterOpen] emitted!'));\n    // Return a result when closed\n    modal.afterClose.subscribe(result => console.log('[afterClose] The result is:', result));\n  }\n\n  /**\n   * 创建删除对话框\n   * @param $!tool.firstLowerCase($!{tableInfo.name}) 待删除的$!{tableInfo.comment}\n   */\n  createDeleteModal($!tool.firstLowerCase($!{tableInfo.name}): $!{tableInfo.name}): void {\n\n    const modal = this.modal.confirm({\n      nzTitle: '删除$!{tableInfo.comment}',\n      nzContent: '确定删除$!{tableInfo.comment}\" ' + $!{tool.firstLowerCase($!{tableInfo.name})}.name + ' \"吗？',\n      nzOnOk: () => {\n        this.delete$!{tableInfo.name}($!tool.append($!tool.firstLowerCase($!{tableInfo.name}),\".id\"));\n      }\n    });\n    modal.afterOpen.subscribe(() => console.log('[afterOpen] emitted!'));\n    // Return a result when closed\n    modal.afterClose.subscribe(result => console.log('[afterClose] The result is:', result));\n  }\n\n\n  /**\n   * 调用后台api创建$!{tableInfo.comment}\n   * @param $!tool.firstLowerCase($!{tableInfo.name}) $!{tableInfo.comment}\n   */\n  create$!{tableInfo.name}($!tool.firstLowerCase($!{tableInfo.name}): $!{tableInfo.name}): void {\n    const messageId = this.message.loading('正在创建中...', {nzDuration: 0}).messageId;\n    this.service.create$!{tableInfo.name}($!tool.firstLowerCase($!{tableInfo.name})).subscribe(\n      (data) => {\n        console.log(data);\n        this.refreshData();\n        this.message.success('创建成功！');\n        this.message.remove(messageId);\n      },\n      (error) => {\n        console.error(error);\n        this.message.error('创建失败！');\n        this.message.remove(messageId);\n      });\n  }\n\n  /**\n   * 调用后台api获取$!{tableInfo.comment}列表（根据过滤条件）\n   *\n   * @return $!{tableInfo.comment}列表\n   */\n  query$!{tableInfo.name}s(\n    pageIndex: number,\n    pageSize: number,\n    sortField: string | null,\n    sortOrder: string | null,\n    filter: Array<{ key: string; value: string[] }>\n  ): void {\n    // 使用表单loading机制代替消息提示\n    // const messageId = this.message.loading('正在获取中...', {nzDuration: 0}).messageId;\n    this.loading = true;\n    this.service.query$!{tableInfo.name}s(pageIndex, pageSize, sortField, sortOrder, filter).subscribe(\n      (data) => {\n        this.loading = false;\n        // this.message.remove(messageId);\n        // this.message.success('获取成功！');\n        this.total = data.totalCount;\n        this.listOfData = data.data;\n      },\n      (error) => {\n        console.log('error: ' + error);\n        this.loading = false;\n        this.message.error('获取失败！');\n        // this.message.remove(messageId);\n      }\n    );\n  }\n\n  /**\n   * 调用后台api删除$!{tableInfo.comment}\n   * @param id $!{tableInfo.comment}id\n   */\n  delete$!{tableInfo.name}(id: string): void {\n    const messageId = this.message.loading('正在删除中...', {nzDuration: 0}).messageId;\n    this.service.delete$!{tableInfo.name}(id).subscribe(\n      (data) => {\n        console.log('next: ' + data);\n        this.message.remove(messageId);\n        this.message.success('删除成功！');\n        this.refreshData();\n      },\n      (error) => {\n        console.log('error: ' + error);\n        this.message.error('删除失败！');\n        this.message.remove(messageId);\n      }\n    );\n  }\n\n  /**\n   * 调用后台api更新$!{tableInfo.comment}\n   * @param id $!{tableInfo.comment}id\n   * @param updateData 更新数据\n   */\n  update$!{tableInfo.name}(id: string, updateData: $!{tableInfo.name}): void {\n    const messageId = this.message.loading('正在更新中...', {nzDuration: 0}).messageId;\n    this.service.update$!{tableInfo.name}(id, updateData).subscribe(\n      (data) => {\n        console.log('next: ' + data);\n        this.message.remove(messageId);\n        this.message.success('更新成功！');\n        this.refreshData();\n      },\n      (error) => {\n        console.log('error: ' + error);\n        this.message.error('更新失败！');\n        this.message.remove(messageId);\n      }\n    );\n  }\n\n  /**\n   * 刷新数据\n   */\n  refreshData(): void {\n    // 重置搜索框\n    this.queryParamValue = '';\n    // 重置分页\n    this.pageIndex = 1;\n\n    this.query$!{tableInfo.name}s(this.pageIndex, this.pageSize, null, null, []);\n  }\n\n  /**\n   * 监听搜索框键盘回车事件\n   * @param event 事件\n   */\n  onKey(event: any): void {\n    if (event.code === 'Enter') {\n      this.onClickSearch();\n    }\n  }\n\n  /**\n   * 搜索按钮点击事件\n   */\n  onClickSearch(): void {\n    // 一般字符首尾处空格都是由于用户误输入，直接忽略字符首尾处多余的空格\n    this.queryParamValue = this.queryParamValue.trim();\n    // 重置分页\n    this.pageIndex = 1;\n    const sortField = null;\n    const sortOrder = null;\n    const filter: Array<{ key: string; value: string[] }> = new Array<{ key: string; value: string[] }>();\n    filter.push({key: 'name', value: [this.queryParamValue]});\n    this.query$!{tableInfo.name}s(this.pageIndex, this.pageSize, sortField, sortOrder, filter);\n  }\n\n  /**\n   * 表格参数变更事件\n   * @param params 表格参数\n   */\n  onQueryParamsChange(params: NzTableQueryParams): void {\n    // console.log(params);\n    const {pageSize, pageIndex, sort, filter} = params;\n    const currentSort = sort.find(item => item.value !== null);\n    const sortField = (currentSort && currentSort.key) || null;\n    const sortOrder = (currentSort && currentSort.value) || null;\n    // 获取搜索框中的数据，添加至过滤条件中\n    filter.push({key: 'name', value: [this.queryParamValue]});\n    this.query$!{tableInfo.name}s(pageIndex, pageSize, sortField, sortOrder, filter);\n  }\n}"
        },
        {
          "name": "list.component.html",
          "code": "##引入宏定义\n$!angularDefine\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/$!tool.firstLowerCase($!{tableInfo.name})/$!tool.firstLowerCase($!{tableInfo.name})-list\", \"-list.component.html\")\n\n<div class=\"table-operations\">\n  <!--  add button start-->\n  <button nz-button nzType=\"primary\" (click)=\"createAddModal()\">\n    <span><i nz-icon nzType=\"plus\" nzTheme=\"outline\"></i> $!{tableInfo.comment}</span>\n  </button>\n  <!--  add button end-->\n\n  <div class=\"pull-right\">\n    <!--    search bar start-->\n    <nz-input-group nzSearch [nzAddOnAfter]=\"suffixIconButton\" style=\"width:220px\">\n      <input nz-input type=\"text\" [(ngModel)]=\"queryParamValue\" (keyup)=\"onKey($event)\"  placeholder=\"input search text\"/>\n    </nz-input-group>\n    <ng-template #suffixIconButton>\n      <button nz-button nzType=\"primary\" nzSearch (click)=\"onClickSearch()\"><i nz-icon nzType=\"search\"></i></button>\n    </ng-template>\n    <!--    search bar end-->\n\n    <!--    refresh button start-->\n    <button nz-button nzType=\"primary\" (click)=\"refreshData()\" class=\"table-top-opt\" nz-popover [nzContent]=\"'刷新'\">\n      <i nz-icon nzType=\"reload\"></i>\n    </button>\n    <!--    refresh button end-->\n  </div>\n\n</div>\n\n\n<!--list start-->\n<nz-table\n  nzShowSizeChanger\n  [nzData]=\"listOfData\"\n  [nzFrontPagination]=\"false\"\n  [nzLoading]=\"loading\"\n  [nzTotal]=\"total\"\n  [nzPageSize]=\"pageSize\"\n  [(nzPageIndex)]=\"pageIndex\"\n  (nzQueryParams)=\"onQueryParamsChange($event)\"\n  >\n  <thead>\n  <tr>\n#foreach($column in $tableInfo.otherColumn)\n    <th>$!{column.comment}</th>\n#end\n    <th>操作</th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr *ngFor=\"let data of listOfData\">\n#foreach($column in $tableInfo.otherColumn)\n    <td>{{ data.$!{column.name} }}</td>\n#end\n    <td>\n      <a (click)=\"createEditModal(data)\">更新</a>\n      <nz-divider nzType=\"vertical\"></nz-divider>\n      <a (click)=\"createDeleteModal(data)\">删除</a>\n    </td>\n  </tr>\n  </tbody>\n</nz-table>\n<!--list end-->"
        },
        {
          "name": "list.component.css",
          "code": "template##引入宏定义\n$!angularDefine\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/$!tool.firstLowerCase($!{tableInfo.name})/$!tool.firstLowerCase($!{tableInfo.name})-list\", \"-list.component.css\")\n\n.table-operations {\n  margin-bottom: 16px;\n}\n\n.table-operations > button {\n  margin-right: 8px;\n}\n\n.pull-left {\n  float: left !important;\n}\n\n.pull-right {\n  float: right !important;\n}\n\n.pull-right .table-top-opt {\n  margin-left: 3px;\n  font-size: 14px;\n}"
        },
        {
          "name": "page.ts",
          "code": "##引入宏定义\n$!angularDefine\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/domain\", \".page.ts\")\n\nimport {$!{tableInfo.name}} from './$!tool.append($!tool.firstLowerCase($!{tableInfo.name}),\".model\")';\n\n##使用宏定义实现类注释信息\n#tableComment(\"分页模型\")\nexport class $!{tableInfo.name}Page {\n  /**\n   * 总数\n   */\n  totalCount: number;\n  /**\n   * 分页第几页\n   */\n  pageNo: number;\n  /**\n   * 分页大小\n   */\n  pageSize: number;\n  /**\n   * 数据集合\n   */\n  data: $!{tableInfo.name}[];\n}"
        }
      ]
    },
    "MybatisPlus-Mixed": {
      "name": "MybatisPlus-Mixed",
      "elementList": [
        {
          "name": "controller.java.vm",
          "code": "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Controller\")\n\n##保存文件（宏定义）\n#save(\"/controller\", \"Controller.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"controller\")\n\n##定义服务名\n#set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \"Service\"))\n\n##定义实体对象名\n#set($entityName = $!tool.firstLowerCase($!tableInfo.name))\n\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.extension.api.ApiController;\nimport com.baomidou.mybatisplus.extension.api.R;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.annotation.Resource;\nimport java.io.Serializable;\nimport java.util.List;\n\n##表注释（宏定义）\n#tableComment(\"表控制层\")\n@RestController\n@RequestMapping(\"$!tool.firstLowerCase($!tableInfo.name)\")\npublic class $!{tableName} extends ApiController {\n    /**\n     * 服务对象\n     */\n    @Resource\n    private $!{tableInfo.name}Service $!{serviceName};\n\n    /**\n     * 分页查询所有数据\n     *\n     * @param page 分页对象\n     * @param $!entityName 查询实体\n     * @return 所有数据\n     */\n    @GetMapping\n    public R selectAll(Page<$!tableInfo.name> page, $!tableInfo.name $!entityName) {\n        return success(this.$!{serviceName}.page(page, new QueryWrapper<>($!entityName)));\n    }\n\n    /**\n     * 通过主键查询单条数据\n     *\n     * @param id 主键\n     * @return 单条数据\n     */\n    @GetMapping(\"{id}\")\n    public R selectOne(@PathVariable Serializable id) {\n        return success(this.$!{serviceName}.getById(id));\n    }\n\n    /**\n     * 新增数据\n     *\n     * @param $!entityName 实体对象\n     * @return 新增结果\n     */\n    @PostMapping\n    public R insert(@RequestBody $!tableInfo.name $!entityName) {\n        return success(this.$!{serviceName}.save($!entityName));\n    }\n\n    /**\n     * 修改数据\n     *\n     * @param $!entityName 实体对象\n     * @return 修改结果\n     */\n    @PutMapping\n    public R update(@RequestBody $!tableInfo.name $!entityName) {\n        return success(this.$!{serviceName}.updateById($!entityName));\n    }\n\n    /**\n     * 删除数据\n     *\n     * @param idList 主键结合\n     * @return 删除结果\n     */\n    @DeleteMapping\n    public R delete(@RequestParam(\"idList\") List<Long> idList) {\n        return success(this.$!{serviceName}.removeByIds(idList));\n    }\n}\n"
        },
        {
          "name": "dao.java.vm",
          "code": "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Dao\")\n\n##保存文件（宏定义）\n#save(\"/dao\", \"Dao.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"dao\")\n\nimport java.util.List;\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport org.apache.ibatis.annotations.Param;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\n\n##表注释（宏定义）\n#tableComment(\"表数据库访问层\")\npublic interface $!{tableName} extends BaseMapper<$!tableInfo.name> {\n\n/**\n* 批量新增数据（MyBatis原生foreach方法）\n*\n* @param entities List<$!{tableInfo.name}> 实例对象列表\n* @return 影响行数\n*/\nint insertBatch(@Param(\"entities\") List<$!{tableInfo.name}> entities);\n\n/**\n* 批量新增或按主键更新数据（MyBatis原生foreach方法）\n*\n* @param entities List<$!{tableInfo.name}> 实例对象列表\n* @return 影响行数\n* @throws org.springframework.jdbc.BadSqlGrammarException 入参是空List的时候会抛SQL语句错误的异常，请自行校验入参\n*/\nint insertOrUpdateBatch(@Param(\"entities\") List<$!{tableInfo.name}> entities);\n\n}\n"
        },
        {
          "name": "entity.java.vm",
          "code": "##导入宏定义\n$!{define.vm}\n\n##保存文件（宏定义）\n#save(\"/entity\", \".java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"entity\")\n\n##自动导入包（全局变量）\n$!autoImport\nimport com.baomidou.mybatisplus.extension.activerecord.Model;\nimport java.io.Serializable;\n\n##表注释（宏定义）\n#tableComment(\"表实体类\")\n@SuppressWarnings(\"serial\")\npublic class $!{tableInfo.name} extends Model<$!{tableInfo.name}> {\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})//${column.comment}#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n#foreach($column in $tableInfo.fullColumn)\n#getSetMethod($column)\n#end\n\n#foreach($column in $tableInfo.pkColumn)\n    /**\n     * 获取主键值\n     *\n     * @return 主键值\n     */\n    @Override\n    protected Serializable pkVal() {\n        return this.$!column.name;\n    }\n    #break\n#end\n}\n"
        },
        {
          "name": "mapper.xml.vm",
          "code": "##引入mybatis支持\n$!{mybatisSupport.vm}\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Dao.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao\">\n\n    <resultMap type=\"$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}\" id=\"$!{tableInfo.name}Map\">\n#foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\" jdbcType=\"$!column.ext.jdbcType\"/>\n#end\n    </resultMap>\n\n    <!-- 批量插入 -->\n    <insert id=\"insertBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.parent.name}.$!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n        (#foreach($column in $tableInfo.otherColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n    </insert>\n    <!-- 批量插入或按主键更新 -->\n    <insert id=\"insertOrUpdateBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.parent.name}.$!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n            (#foreach($column in $tableInfo.otherColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n        on duplicate key update\n         #foreach($column in $tableInfo.otherColumn)$!column.obj.name = values($!column.obj.name) #if($velocityHasNext), #end#end\n    </insert>\n\n</mapper>\n"
        },
        {
          "name": "service.java.vm",
          "code": "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Service\")\n\n##保存文件（宏定义）\n#save(\"/service\", \"Service.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"service\")\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\n\n##表注释（宏定义）\n#tableComment(\"表服务接口\")\npublic interface $!{tableName} extends IService<$!tableInfo.name> {\n\n}\n"
        },
        {
          "name": "serviceImpl.java.vm",
          "code": "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"ServiceImpl\")\n\n##保存文件（宏定义）\n#save(\"/service/impl\", \"ServiceImpl.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"service.impl\")\n\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.stereotype.Service;\n\n##表注释（宏定义）\n#tableComment(\"表服务实现类\")\n@Service(\"$!tool.firstLowerCase($tableInfo.name)Service\")\npublic class $!{tableName} extends ServiceImpl<$!{tableInfo.name}Dao, $!{tableInfo.name}> implements $!{tableInfo.name}Service {\n\n}\n"
        }
      ]
    },
    "spring-cloud-jpa": {
      "name": "spring-cloud-jpa",
      "elementList": [
        {
          "name": "entity.java",
          "code": "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n$!callback.setFileName($tool.append($tableInfo.name, \".java\"))\n##save(\"/entity\", \".java\")\n$!callback.setSavePath($tool.append($projectPath, \"/$!{projectName}-service\", \"/src/main/java/$!{packagePath}\", \"/entity\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"entity\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport lombok.Data;\nimport javax.persistence.Entity;\nimport javax.persistence.Table;\nimport javax.persistence.Id;\n\n##使用宏定义实现类注释信息\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})实体类\n *\n * @author $!author\n * @since $!time.currTime(\"yyyy/MM/dd\")\n */\n@Data\n@Entity\n@Table(name = \"$!{tool.firstLowerCase($!{tableInfo.name})}\")\npublic class $!{tableInfo.name} {\n    /**\n     * ${pk.comment}\n     */\n    @Id\n    private $!{pk.shortType} $!{pk.name};\n    \n#foreach($column in $tableInfo.otherColumn)\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n    \n#end\n}"
        },
        {
          "name": "repository.java",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Repository\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n##$!callback.setSavePath($tool.append($tableInfo.savePath, \"/repository\"))\n$!callback.setSavePath($tool.append($projectPath, \"/$!{projectName}-service\", \"/src/main/java/$!{packagePath}\", \"/repository\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}repository;\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.JpaSpecificationExecutor;\nimport org.springframework.stereotype.Repository;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表数据库访问层\n *\n * @author $!author\n * @since $!time.currTime(\"yyyy/MM/dd\")\n */\n@Repository\npublic interface $!{tableName} extends JpaRepository<$!{tableInfo.name} ,$!pk.shortType>, JpaSpecificationExecutor<$!{tableInfo.name}>{\n\n  \n}"
        },
        {
          "name": "service.java",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Service\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n##$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service\"))\n$!callback.setSavePath($tool.append($projectPath, \"/$!{projectName}-service\", \"/src/main/java/$!{packagePath}\", \"/service\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;\n\n##使用全局变量实现默认包导入\nimport com.moluo.auth.adapter.bean.AccessContext;\nimport com.moluo.common.domain.MoPageVO;\nimport $!{tableInfo.savePackageName}.domain.dto.$!{tableInfo.name}DTO;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务接口\n *\n * @author $!author\n * @since $!time.currTime(\"yyyy/MM/dd\")\n */\npublic interface $!{tableName} {\n    /**\n     * 创建$!{tableInfo.comment}\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name})DTO $!{tableInfo.comment}\n     * @return $!{tableInfo.comment}\n     */\n    $!{tableInfo.name}DTO create$!{tableInfo.name}($!{tableInfo.name}DTO $!tool.firstLowerCase($!{tableInfo.name})DTO, AccessContext accessContext);\n\n    /**\n     * 删除$!{tableInfo.comment}\n     *\n     * @param $!pk.name $!{tableInfo.comment}的$!{pk.comment}\n     */\n    void delete$!{tableInfo.name}($!pk.shortType $!pk.name, AccessContext accessContext);\n\n    /**\n     * 获取$!{tableInfo.comment}列表\n     *\n     * @return $!{tableInfo.comment}列表\n     */\n    List<$!{tableInfo.name}DTO> list$!{tableInfo.name}s(AccessContext accessContext);\n\n    /**\n     * 获取$!{tableInfo.comment}列表(分页)\n     *\n     * @param queryParams 查询参数\n     * @param pageable    分页和排序参数\n     * @return $!{tableInfo.comment}列表\n     */\n    MoPageVO<$!{tableInfo.name}DTO> list$!{tableInfo.name}s(Map<String, Object> queryParams, Pageable pageable, AccessContext accessContext);\n\n    /**\n     * 获取$!{tableInfo.comment}\n     *\n     * @param $!pk.name $!{tableInfo.comment}的$!{pk.comment}\n     * @return $!{tableInfo.comment}\n     */\n    $!{tableInfo.name}DTO get$!{tableInfo.name}($!pk.shortType $!pk.name, AccessContext accessContext);\n    \n    /**\n     * 更新$!{tableInfo.comment}\n     *\n     * @param $!pk.name $!{tableInfo.comment}的$!{pk.comment}\n     * @param $!tool.firstLowerCase($!{tableInfo.name})DTO $!{tableInfo.comment}\n     * @return $!{tableInfo.comment}\n     */\n    $!{tableInfo.name}DTO update$!{tableInfo.name}($!pk.shortType $!pk.name, $!{tableInfo.name}DTO $!tool.firstLowerCase($!{tableInfo.name})DTO, AccessContext accessContext);\n\n}"
        },
        {
          "name": "serviceImpl.java",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"ServiceImpl\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n##$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service/impl\"))\n$!callback.setSavePath($tool.append($projectPath, \"/$!{projectName}-service\", \"/src/main/java/$!{packagePath}\", \"/service/impl\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;\n\n##使用全局变量实现默认包导入\nimport com.moluo.auth.adapter.bean.AccessContext;\nimport com.moluo.common.domain.MoPageVO;\nimport com.moluo.common.service.util.MyBeanUtils;\nimport $!{tableInfo.savePackageName}.domain.dto.$!{tableInfo.name}DTO;\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.repository.$!{tableInfo.name}Repository;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport $!{tableInfo.savePackageName}.service.util.$!{tableInfo.name}ConvertUtils;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springframework.stereotype.Service;\n\nimport javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Predicate;\nimport javax.persistence.criteria.Root;\nimport java.util.*;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务实现类\n *\n * @author $!author\n * @since $!time.currTime(\"yyyy/MM/dd\")\n */\n@Slf4j\n@Service(\"$!tool.firstLowerCase($!{tableInfo.name})Service\")\npublic class $!{tableInfo.name}ServiceImpl implements $!{tableInfo.name}Service {\n\n    @Autowired\n    private $!{tableInfo.name}Repository $!{tool.firstLowerCase($tableInfo.name)}Repository;\n\n    @Override\n    public $!{tableInfo.name}DTO create$!{tableInfo.name}($!{tableInfo.name}DTO $!{tool.firstLowerCase($tableInfo.name)}DTO, AccessContext accessContext) {\n        $!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)} = $!{tableInfo.name}ConvertUtils.dto2entity($!{tool.firstLowerCase($tableInfo.name)}DTO);\n        return $!{tableInfo.name}ConvertUtils.entity2dto($!{tool.firstLowerCase($tableInfo.name)}Repository.save($!{tool.firstLowerCase($tableInfo.name)}));\n    }\n\n    @Override\n    public void delete$!{tableInfo.name}(String id, AccessContext accessContext) {\n        $!{tool.firstLowerCase($tableInfo.name)}Repository.deleteById(id);\n    }\n\n    @Override\n    public List<$!{tableInfo.name}DTO> list$!{tableInfo.name}s(AccessContext accessContext) {\n        return $!{tableInfo.name}ConvertUtils.entitys2dtos($!{tool.firstLowerCase($tableInfo.name)}Repository.findAll());\n    }\n\n    @Override\n    public MoPageVO<$!{tableInfo.name}DTO> list$!{tableInfo.name}s(Map<String, Object> queryParams, Pageable pageable, AccessContext accessContext) {\n        Specification<$!{tableInfo.name}> specification = new Specification<$!{tableInfo.name}>() {\n            @Override\n            public Predicate toPredicate(Root<$!{tableInfo.name}> root, CriteriaQuery<?> query, CriteriaBuilder criteriaBuilder) {\n                List<Predicate> list = new ArrayList<>();\n#foreach($column in $tableInfo.otherColumn)\n                //  若$!{column.name}存在，根据$!{column.name}过滤\n                final String $!{column.name}Key = \"$!{column.name}\";\n                if (StringUtils.isNotBlank((String) queryParams.get($!{column.name}Key))) {\n                    list.add(criteriaBuilder.equal(root.get($!{column.name}Key).as($!{tool.getClsNameByFullName($column.type)}.class), queryParams.get($!{column.name}Key)));\n                }\n#end\n                Predicate[] predicates = new Predicate[list.size()];\n                return criteriaBuilder.and(list.toArray(predicates));\n            }\n        };\n        Page<$!{tableInfo.name}> $!{tool.firstLowerCase($tableInfo.name)}Page = $!{tool.firstLowerCase($tableInfo.name)}Repository.findAll(specification, pageable);\n        return $!{tableInfo.name}ConvertUtils.entityPage2dtoPage($!{tool.firstLowerCase($tableInfo.name)}Page);\n    }\n\n    @Override\n    public $!{tableInfo.name}DTO get$!{tableInfo.name}(String id, AccessContext accessContext) {\n        Optional<$!{tableInfo.name}> optional = $!{tool.firstLowerCase($tableInfo.name)}Repository.findById(id);\n        if (!optional.isPresent()) {\n            throw new RuntimeException();\n        }\n        return $!{tableInfo.name}ConvertUtils.entity2dto(optional.get());\n    }\n\n    @Override\n    public $!{tableInfo.name}DTO update$!{tableInfo.name}(String id, $!{tableInfo.name}DTO $!{tool.firstLowerCase($tableInfo.name)}DTO, AccessContext accessContext) {\n        $!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)} = $!{tableInfo.name}ConvertUtils.dto2entity($!{tool.firstLowerCase($tableInfo.name)}DTO);\n\n        Optional<$!{tableInfo.name}> optional = $!{tool.firstLowerCase($tableInfo.name)}Repository.findById(id);\n        if (!optional.isPresent()) {\n            throw new RuntimeException(\"请求的id不存在\");\n        }\n        $!{tableInfo.name} raw$!{tableInfo.name} = optional.get();\n\n        MyBeanUtils.copyNoNullProperties($!{tool.firstLowerCase($tableInfo.name)}, raw$!{tableInfo.name});\n        return $!{tableInfo.name}ConvertUtils.entity2dto($!{tool.firstLowerCase($tableInfo.name)}Repository.save(raw$!{tableInfo.name}));\n    }\n\n}"
        },
        {
          "name": "controller.java",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Controller\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n##$!callback.setSavePath($tool.append($tableInfo.savePath, \"/controller\"))\n$!callback.setSavePath($tool.append($projectPath, \"/$!{projectName}-controller\", \"/src/main/java/$!{packagePath}\", \"/controller\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;\n\n##使用全局变量实现默认包导入\nimport com.moluo.auth.adapter.bean.AccessContext;\nimport com.moluo.auth.adapter.util.AccessContextUtils;\nimport com.moluo.common.domain.MoPageVO;\nimport $!{tableInfo.savePackageName}.api.$!{tableInfo.name}Api;\nimport $!{tableInfo.savePackageName}.domain.dto.$!{tableInfo.name}DTO;\nimport $!{tableInfo.savePackageName}.domain.params.$!{tableInfo.name}Param;\nimport $!{tableInfo.savePackageName}.domain.util.$!{tableInfo.name}ConvertUtils;\nimport $!{tableInfo.savePackageName}.domain.vo.$!{tableInfo.name}VO;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表控制层\n *\n * @author $!author\n * @since $!time.currTime(\"yyyy/MM/dd\")\n */\n@RestController\n@RequestMapping(\"/mo/v1/$!tool.firstLowerCase($tableInfo.name)\")\npublic class $!{tableInfo.name}Controller implements $!{tableInfo.name}Api {\n\n    @Autowired\n    private $!{tableInfo.name}Service $!{tool.firstLowerCase($tableInfo.name)}Service;\n\n    @Override\n    public $!{tableInfo.name}VO create$!{tableInfo.name}(@RequestBody $!{tableInfo.name}Param $!{tool.firstLowerCase($tableInfo.name)}Param) {\n        $!{tableInfo.name}DTO $!{tool.firstLowerCase($tableInfo.name)}DTO = $!{tableInfo.name}ConvertUtils.param2dto($!{tool.firstLowerCase($tableInfo.name)}Param);\n        AccessContext accessContext = getAccessContext();\n        return $!{tableInfo.name}ConvertUtils.dto2vo($!{tool.firstLowerCase($tableInfo.name)}Service.create$!{tableInfo.name}($!{tool.firstLowerCase($tableInfo.name)}DTO, accessContext));\n    }\n\n    @Override\n    public void delete$!{tableInfo.name}(@PathVariable String id) {\n        AccessContext accessContext = getAccessContext();\n        $!{tool.firstLowerCase($tableInfo.name)}Service.delete$!{tableInfo.name}(id, accessContext);\n    }\n\n    @Override\n    public List<$!{tableInfo.name}VO> list$!{tableInfo.name}s() {\n        AccessContext accessContext = getAccessContext();\n        return $!{tableInfo.name}ConvertUtils.dtos2vos($!{tool.firstLowerCase($tableInfo.name)}Service.list$!{tableInfo.name}s(accessContext));\n    }\n\n    @Override\n    public MoPageVO<$!{tableInfo.name}VO> listProductsPage(@PathVariable Integer pageNo, @PathVariable Integer pageSize,\n                                             @RequestParam Map<String, Object> params) {\n        AccessContext accessContext = getAccessContext();\n        // 与分页和排序有关的参数\n        String sortField = StringUtils.defaultIfBlank((String) params.get(\"sortField\"), \"createTime\");\n        sortField = !StringUtils.equalsIgnoreCase(sortField, \"null\") ? sortField : \"createTime\";\n        String sortOrder = StringUtils.defaultIfBlank((String) params.get(\"sortOrder\"), \"\");\n        Sort.Direction direction = StringUtils.equalsIgnoreCase(sortOrder, \"asc\") ? Sort.Direction.ASC : Sort.Direction.DESC;\n        Pageable pageable = PageRequest.of(pageNo, pageSize, direction, sortField);\n        // 其他查询参数\n        Map<String, Object> map = new HashMap<>();\n#foreach($column in $tableInfo.otherColumn)\n        String $!{column.name} = StringUtils.defaultString((String) params.get(\"$!{column.name}\"));\n        map.put(\"$!{column.name}\", $!{column.name});\n#end\n\n        MoPageVO<$!{tableInfo.name}DTO> $!{tool.firstLowerCase($tableInfo.name)}Page = $!{tool.firstLowerCase($tableInfo.name)}Service.list$!{tableInfo.name}s(map, pageable, accessContext);\n        return $!{tableInfo.name}ConvertUtils.dtoPage2voPage($!{tool.firstLowerCase($tableInfo.name)}Page);\n    }\n\n    @Override\n    public $!{tableInfo.name}VO get$!{tableInfo.name}(@PathVariable String id) {\n        AccessContext accessContext = getAccessContext();\n        return $!{tableInfo.name}ConvertUtils.dto2vo($!{tool.firstLowerCase($tableInfo.name)}Service.get$!{tableInfo.name}(id, accessContext));\n    }\n\n    @Override\n    public $!{tableInfo.name}VO update$!{tableInfo.name}(@PathVariable String id, @RequestBody $!{tableInfo.name}Param $!{tool.firstLowerCase($tableInfo.name)}Param) {\n        $!{tableInfo.name}DTO $!{tool.firstLowerCase($tableInfo.name)}DTO = $!{tableInfo.name}ConvertUtils.param2dto($!{tool.firstLowerCase($tableInfo.name)}Param);\n        AccessContext accessContext = getAccessContext();\n        return $!{tableInfo.name}ConvertUtils.dto2vo($!{tool.firstLowerCase($tableInfo.name)}Service.update$!{tableInfo.name}(id, $!{tool.firstLowerCase($tableInfo.name)}DTO, accessContext));\n    }\n\n    private AccessContext getAccessContext() {\n        return AccessContextUtils.getAccessContext();\n    }\n}"
        },
        {
          "name": "param.java",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Param\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n##$!callback.setSavePath($tool.append($tableInfo.savePath, \"/domain/params\"))\n$!callback.setSavePath($tool.append($projectPath, \"/$!{projectName}-domain\", \"/src/main/java/$!{packagePath}\", \"/domain/params\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}domain.params;\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport lombok.Data;\n\n##使用宏定义实现类注释信息\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})入参类\n * <p>\n * 封装外部传入的对象数据\n *\n * @author $!author\n * @since $!time.currTime(\"yyyy/MM/dd\")\n */\n@Data\npublic class $!{tableName} {\n    \n#foreach($column in $tableInfo.otherColumn)\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n    \n#end\n}"
        },
        {
          "name": "vo.java",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"VO\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n##$!callback.setSavePath($tool.append($tableInfo.savePath, \"/domain/vo\"))\n$!callback.setSavePath($tool.append($projectPath, \"/$!{projectName}-domain\", \"/src/main/java/$!{packagePath}\", \"/domain/vo\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}domain.vo;\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport lombok.Data;\n\n##使用宏定义实现类注释信息\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})VO类\n * <p>\n * 封装需要对外暴露的对象数据\n *\n * @author $!author\n * @since $!time.currTime(\"yyyy/MM/dd\")\n */\n@Data\npublic class $!{tableName} {\n    /**\n     * ${pk.comment}\n     */\n    private $!{pk.shortType} $!{pk.name};\n    \n#foreach($column in $tableInfo.otherColumn)\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n    \n#end\n}"
        },
        {
          "name": "dto.java",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"DTO\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n##$!callback.setSavePath($tool.append($tableInfo.savePath, \"/domain/dto\"))\n$!callback.setSavePath($tool.append($projectPath, \"/$!{projectName}-domain\", \"/src/main/java/$!{packagePath}\", \"/domain/dto\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}domain.dto;\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport lombok.Data;\n\n##使用宏定义实现类注释信息\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})DTO类\n * <p>\n * 封装需要对外暴露的对象数据\n *\n * @author $!author\n * @since $!time.currTime(\"yyyy/MM/dd\")\n */\n@Data\npublic class $!{tableName} {\n    /**\n     * ${pk.comment}\n     */\n    private $!{pk.shortType} $!{pk.name};\n    \n#foreach($column in $tableInfo.otherColumn)\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n    \n#end\n}"
        },
        {
          "name": "domain.build.gradle",
          "code": "##设置回调\n$!callback.setFileName(\"build.gradle\")\n##$!callback.setSavePath($modulePath)\n$!callback.setSavePath($tool.append($projectPath, \"/$!{projectName}-domain\"))\n\nplugins {\n    id 'java'\n    id 'java-library'\n}\n\nbootJar {\n    enabled = false\n}\n\njar {\n    enabled = true\n}\n\ndependencies {\n    api 'com.moluo:mo-common-domain'\n\n    testImplementation 'org.junit.jupiter:junit-jupiter-engine'\n}"
        },
        {
          "name": "api.build.gradle",
          "code": "##设置回调\n$!callback.setFileName(\"build.gradle\")\n##$!callback.setSavePath($modulePath)\n$!callback.setSavePath($tool.append($projectPath, \"/$!{projectName}-api\"))\n\nplugins {\n    id 'java'\n    id 'java-library'\n    id 'org.springframework.boot'\n    id 'io.spring.dependency-management'\n}\n\nbootJar {\n    enabled = false\n}\n\njar {\n    enabled = true\n}\n\ndependencies {\n    api 'com.moluo:mo-common-api'\n\n    api project(\":$!{projectName}-domain\")\n\n    compileOnly 'org.springframework.boot:spring-boot-starter-web'\n    implementation 'io.springfox:springfox-swagger-ui'\n    implementation 'io.springfox:springfox-swagger2'\n}"
        },
        {
          "name": "client.build.gradle",
          "code": "##设置回调\n$!callback.setFileName(\"build.gradle\")\n##$!callback.setSavePath($modulePath)\n$!callback.setSavePath($tool.append($projectPath, \"/$!{projectName}-client\"))\n\nplugins {\n    id 'java'\n    id 'java-library'\n}\n\nbootJar {\n    enabled = false\n}\n\njar {\n    enabled = true\n}\n\ndependencies {\n    api project(\":$!{projectName}-api\")\n    api 'org.springframework.cloud:spring-cloud-starter-openfeign'\n\n    testImplementation('org.springframework.boot:spring-boot-starter-test')\n}"
        },
        {
          "name": "controller.build.gradle",
          "code": "##设置回调\n$!callback.setFileName(\"build.gradle\")\n##$!callback.setSavePath($modulePath)\n$!callback.setSavePath($tool.append($projectPath, \"/$!{projectName}-controller\"))\n\nplugins {\n    id 'java'\n    id 'java-library'\n    id 'org.springframework.boot'\n    id 'io.spring.dependency-management'\n}\n\nbootJar {\n    enabled = false\n}\n\njar {\n    enabled = true\n}\n\nconfigurations {\n    compileOnly {\n        extendsFrom annotationProcessor\n    }\n}\n\ndependencies {\n    implementation 'org.springframework.boot:spring-boot-starter-web'\n    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'\n\n    api 'com.moluo:mo-auth-adapter'\n\n    api project(\":$!{projectName}-api\")\n    api project(\":$!{projectName}-service\")\n\n    testImplementation 'org.springframework.boot:spring-boot-starter-test'\n}\n\ntasks.named('test') {\n    useJUnitPlatform()\n}"
        },
        {
          "name": "server.build.gradle",
          "code": "##设置回调\n$!callback.setFileName(\"build.gradle\")\n##$!callback.setSavePath($modulePath)\n$!callback.setSavePath($tool.append($projectPath, \"/$!{projectName}-server\"))\n\nplugins {\n    id 'java'\n    id 'org.springframework.boot'\n    id 'io.spring.dependency-management'\n}\n\nbootJar {\n    enabled = true\n}\n\njar {\n    enabled = true\n}\n\nconfigurations {\n    compileOnly {\n        extendsFrom annotationProcessor\n    }\n}\n\ndependencies {\n    implementation 'org.springframework.boot:spring-boot-starter-web'\n    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'\n\n    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'\n    implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config'\n    implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery'\n\n    implementation 'com.moluo:mo-common-server'\n    implementation 'com.moluo:mo-auth-adapter'\n    implementation project(\":$!{projectName}-api\")\n    implementation project(\":$!{projectName}-controller\")\n}\n\ntasks.named('test') {\n    useJUnitPlatform()\n}"
        },
        {
          "name": "service.build.gradle",
          "code": "##设置回调\n$!callback.setFileName(\"build.gradle\")\n##$!callback.setSavePath($modulePath)\n$!callback.setSavePath($tool.append($projectPath, \"/$!{projectName}-service\"))\n\nplugins {\n    id 'java'\n    id 'java-library'\n    id 'org.springframework.boot'\n    id 'io.spring.dependency-management'\n}\n\nbootJar {\n    enabled = false\n}\n\njar {\n    enabled = true\n}\n\ndependencies {\n    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'\n    implementation 'org.springframework.security:spring-security-core'\n\n    api 'com.moluo:mo-common-service'\n    implementation 'com.moluo:mo-auth-adapter'\n    implementation project(\":$!{projectName}-domain\")\n\n    compileOnly 'org.projectlombok:lombok'\n    annotationProcessor 'org.projectlombok:lombok'\n\n    implementation 'mysql:mysql-connector-java'\n    implementation 'org.liquibase:liquibase-core'\n\n    testImplementation 'org.springframework.boot:spring-boot-starter-test'\n}"
        },
        {
          "name": "settings.gradle",
          "code": "##设置回调\n$!callback.setFileName(\"settings.gradle\")\n$!callback.setSavePath($projectPath)\n\nrootProject.name = '$!{projectName}'\ninclude '$!{projectName}-service'\ninclude '$!{projectName}-api'\ninclude '$!{projectName}-server'\ninclude '$!{projectName}-controller'\ninclude '$!{projectName}-domain'\ninclude '$!{projectName}-client'"
        },
        {
          "name": "build.gradle",
          "code": "##设置回调\n$!callback.setFileName(\"build.gradle\")\n$!callback.setSavePath($projectPath)\n\nplugins {\n    id 'java'\n    id 'java-library'\n    id 'org.springframework.boot' version '2.7.2'\n    id 'io.spring.dependency-management' version '1.0.12.RELEASE'\n    id 'maven-publish'\n    id 'jacoco'\n}\n\nallprojects {\n\n    apply plugin: 'java'\n    apply plugin: 'java-library'\n    apply plugin: 'maven-publish'\n    apply plugin: 'jacoco'\n\n    group = 'com.moluo'\n    // 提示：版本信息已迁移到gradle.properties文件中\n    // version = '0.0.1-SNAPSHOT'\n    sourceCompatibility = '1.8'\n\n    tasks.withType(JavaCompile) {\n        options.encoding = \"UTF-8\"\n    }\n\n    repositories {\n        mavenLocal()\n        maven { url 'https://maven.aliyun.com/repository/public/' }\n        maven { url 'https://maven.aliyun.com/repository/spring/' }\n        maven {\n            credentials {\n                username repoUsername\n                password repoPassword\n            }\n            url releasesRepoUrl\n        }\n        maven {\n            credentials {\n                username repoUsername\n                password repoPassword\n            }\n            url snapshotsRepoUrl\n        }\n        mavenCentral()\n    }\n\n\n    java {\n//        withJavadocJar()\n        withSourcesJar()\n    }\n\n    jar {\n        enabled = true\n//        archiveClassifier = ''\n    }\n\n    javadoc {\n        options{\n            encoding \"UTF-8\"\n            charSet 'UTF-8'\n        }\n    }\n\n    tasks.withType(JavaCompile) {\n        options.encoding = \"UTF-8\"\n    }\n\n    bootJar {\n        enabled = false\n    }\n\n    publishing {\n        publications {\n            maven(MavenPublication) {\n                groupId = project.group\n                artifactId = project.name\n                version = project.version\n\n                from components.java\n\n                versionMapping {\n                    usage('java-api') {\n                        fromResolutionOf('runtimeClasspath')\n                    }\n                    usage('java-runtime') {\n                        fromResolutionResult()\n                    }\n                }\n            }\n        }\n\n        repositories {\n            mavenLocal()\n            // 阿里云效镜像仓库\n            maven {\n                // 凭证\n                credentials {\n                    username repoUsername   // 仓库发布用户名\n                    password repoPassword   // 仓库发布用户密码\n                }\n                // 地址\n                def releasesRepoUrl = releasesRepoUrl\n                def snapshotsRepoUrl = snapshotsRepoUrl\n                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl\n            }\n        }\n    }\n\n}\n\nsubprojects {\n    apply plugin: 'org.springframework.boot'\n    apply plugin: 'io.spring.dependency-management'\n\n    ext {\n        set('springCloudVersion', \"2021.0.4\")\n        set('springCloudAlibabaVersion', \"2021.0.4.0\")\n    }\n\n    dependencyManagement {\n        imports {\n            mavenBom \"org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}\"\n            mavenBom \"com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}\"\n        }\n        dependencies {\n            dependency 'com.moluo:mo-common-api:0.0.1-SNAPSHOT'\n            dependency 'com.moluo:mo-common-service:0.0.1-SNAPSHOT'\n            dependency 'com.moluo:mo-common-domain:0.0.1-SNAPSHOT'\n            dependency 'com.moluo:mo-common-server:0.0.1-SNAPSHOT'\n            dependency 'com.moluo:mo-common-client:0.0.1-SNAPSHOT'\n            dependency 'com.moluo:mo-common-util:0.0.1-SNAPSHOT'\n            dependency 'com.moluo:mo-auth-adapter:0.0.1-SNAPSHOT'\n\n            dependency 'mysql:mysql-connector-java:8.0.18'\n            dependency 'org.liquibase:liquibase-core:4.2.2'\n\n            dependency 'io.springfox:springfox-swagger-ui:2.9.2'\n            dependency 'io.springfox:springfox-swagger2:2.9.2'\n\n        }\n    }\n\n    dependencies {\n        compileOnly 'org.projectlombok:lombok'\n        annotationProcessor 'org.projectlombok:lombok'\n    }\n\n    test {\n        useJUnitPlatform()\n    }\n\n}\n\n// 汇总 Gradle 多模块测试结果\ntask testRootReport(type: TestReport, group: 'verification') {\n    destinationDir = file(\"$buildDir/reports/tests/test\")\n    // Include the results from the `test` task in all subprojects\n    reportOn subprojects*.test {\n        ignoreFailures = true // 忽略测试失败\n    }\n}\n\n// 汇总 Gradle 多模块代码覆盖率报告\ntask jacocoRootReport(type: JacocoReport, group: 'verification') {\n    description = 'Generates an aggregate report from all subprojects'\n    dependsOn(subprojects.test)\n\n    additionalSourceDirs.from = files(subprojects.sourceSets.main.allSource.srcDirs)\n    sourceDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs)\n    classDirectories.from = files(subprojects.sourceSets.main.output)\n    executionData.from = files(subprojects.jacocoTestReport.executionData)\n\n    reports {\n        html.enabled true\n        html.outputLocation = file(\"$buildDir/reports/jacoco/test/html\")\n    }\n}"
        },
        {
          "name": "gradle.properties",
          "code": "##设置回调\n$!callback.setFileName(\"gradle.properties\")\n$!callback.setSavePath($projectPath)\n\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\nversion=0.0.1-SNAPSHOT\n\nreleasesRepoUrl=https://packages.aliyun.com/maven/repository/release/\nsnapshotsRepoUrl=https://packages.aliyun.com/maven/repository/snapshot/\nrepoUsername=username\nrepoPassword=password"
        },
        {
          "name": "convertUtils.java",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"ConvertUtils\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n##$!callback.setSavePath($tool.append($tableInfo.savePath, \"/domain/util\"))\n$!callback.setSavePath($tool.append($projectPath, \"/$!{projectName}-domain\", \"/src/main/java/$!{packagePath}\", \"/domain/util\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}domain.util;\n\n##使用全局变量实现默认包导入\nimport com.moluo.common.domain.MoPageVO;\nimport $!{tableInfo.savePackageName}.domain.dto.$!{tableInfo.name}DTO;\nimport $!{tableInfo.savePackageName}.domain.params.$!{tableInfo.name}Param;\nimport $!{tableInfo.savePackageName}.domain.vo.$!{tableInfo.name}VO;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n##使用宏定义实现类注释信息\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})转换工具类\n *\n * @author $!author\n * @since $!time.currTime(\"yyyy/MM/dd\")\n */\npublic class $!{tableName} {\n\n    /**\n     * $!{tableInfo.comment}param转换为$!{tableInfo.comment}DTO\n     *\n     * @param param $!{tableInfo.comment}param\n     * @return $!{tableInfo.comment}DTO\n     */\n    public static $!{tableInfo.name}DTO param2dto($!{tableInfo.name}Param param) {\n        $!{tableInfo.name}DTO $!tool.firstLowerCase($tableInfo.name)DTO = new $!{tableInfo.name}DTO();\n#foreach($column in $tableInfo.otherColumn)\n        $!{tool.firstLowerCase($tableInfo.name)}DTO.set$!{tool.firstUpperCase($column.name)}(param.get$!{tool.firstUpperCase($column.name)}());\n#end\n        return $!tool.firstLowerCase($tableInfo.name)DTO;\n    }\n\n    /**\n     * $!{tableInfo.comment}param列表转换为$!{tableInfo.comment}DTO列表\n     *\n     * @param params $!{tableInfo.comment}param列表\n     * @return $!{tableInfo.comment}DTO列表\n     */\n    public static List<$!{tableInfo.name}DTO> params2dtos(List<$!{tableInfo.name}Param> params) {\n        List<$!{tableInfo.name}DTO> $!{tool.firstLowerCase($tableInfo.name)}DTOS = new ArrayList<>();\n        for ($!{tableInfo.name}Param $!{tool.firstLowerCase($tableInfo.name)}Param : params) {\n            $!{tool.firstLowerCase($tableInfo.name)}DTOS.add(param2dto($!{tool.firstLowerCase($tableInfo.name)}Param));\n        }\n        return $!{tool.firstLowerCase($tableInfo.name)}DTOS;\n    }\n\n    /**\n     * $!{tableInfo.comment}DTO转换为$!{tableInfo.comment}VO\n     *\n     * @param dto $!{tableInfo.comment}DTO\n     * @return $!{tableInfo.comment}VO\n     */\n    public static $!{tableInfo.name}VO dto2vo($!{tableInfo.name}DTO dto) {\n        $!{tableInfo.name}VO $!{tool.firstLowerCase($tableInfo.name)}VO = new $!{tableInfo.name}VO();\n#foreach($column in $tableInfo.fullColumn)\n        $!{tool.firstLowerCase($tableInfo.name)}VO.set$!{tool.firstUpperCase($column.name)}(dto.get$!{tool.firstUpperCase($column.name)}());\n#end\n        return $!{tool.firstLowerCase($tableInfo.name)}VO;\n    }\n\n    /**\n     * $!{tableInfo.comment}DTO列表转换为$!{tableInfo.comment}VO列表\n     *\n     * @param dtos $!{tableInfo.comment}DTO列表\n     * @return $!{tableInfo.comment}VO列表\n     */\n    public static List<$!{tableInfo.name}VO> dtos2vos(List<$!{tableInfo.name}DTO> dtos) {\n        List<$!{tableInfo.name}VO> $!{tool.firstLowerCase($tableInfo.name)}VOS = new ArrayList<>();\n        for ($!{tableInfo.name}DTO $!{tool.firstLowerCase($tableInfo.name)}DTO : dtos) {\n            $!{tool.firstLowerCase($tableInfo.name)}VOS.add(dto2vo($!{tool.firstLowerCase($tableInfo.name)}DTO));\n        }\n        return $!{tool.firstLowerCase($tableInfo.name)}VOS;\n    }\n    \n    /**\n     * $!{tableInfo.comment}DTO分页转换为$!{tableInfo.comment}VO分页\n     *\n     * @param dtoPage $!{tableInfo.comment}DTO分页\n     * @return $!{tableInfo.comment}VO分页\n     */\n    public static MoPageVO<$!{tableInfo.name}VO> dtoPage2voPage(MoPageVO<$!{tableInfo.name}DTO> dtoPage) {\n        MoPageVO<$!{tableInfo.name}VO> voPage = new MoPageVO<>();\n        voPage.setTotalCount(dtoPage.getTotalCount());\n        voPage.setPageNo(dtoPage.getPageNo());\n        voPage.setPageSize(dtoPage.getPageSize());\n        voPage.setData(dtos2vos(dtoPage.getData()));\n        return voPage;\n    }\n\n}"
        },
        {
          "name": "api.java",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Api\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n##$!callback.setSavePath($tool.append($tableInfo.savePath, \"/api\"))\n$!callback.setSavePath($tool.append($projectPath, \"/$!{projectName}-api\", \"/src/main/java/$!{packagePath}\", \"/api\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}api;\n\n##使用全局变量实现默认包导入\nimport com.moluo.common.domain.MoPageVO;\nimport $!{tableInfo.savePackageName}.domain.params.$!{tableInfo.name}Param;\nimport $!{tableInfo.savePackageName}.domain.vo.$!{tableInfo.name}VO;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiImplicitParam;\nimport io.swagger.annotations.ApiImplicitParams;\nimport io.swagger.annotations.ApiOperation;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})API\n *\n * @author $!author\n * @since $!time.currTime(\"yyyy/MM/dd\")\n */\n@Api(\"$!{tableInfo.comment}($!{tableInfo.name})服务\")\n//@RestController\n//@RequestMapping(\"/mo/v1/$!tool.firstLowerCase($tableInfo.name)\")\npublic interface $!{tableInfo.name}Api {\n\n    @PostMapping(\"\")\n    @ApiOperation(value = \"创建$!{tableInfo.comment}\", notes = \"创建$!{tableInfo.comment}\")\n    @ApiImplicitParam(name = \"$!tool.firstLowerCase($tableInfo.name)Param\", value = \"$!{tableInfo.comment}入参\", dataType = \"$!{tableInfo.name}Param\", required = true, paramType = \"body\")\n    $!{tableInfo.name}VO create$!{tableInfo.name}(@RequestBody $!{tableInfo.name}Param $!tool.firstLowerCase($tableInfo.name)Param);\n\n    @DeleteMapping(\"/{$!pk.name}\")\n    @ApiOperation(value = \"删除$!{tableInfo.comment}\", notes = \"删除$!{tableInfo.comment}\")\n    @ApiImplicitParams(value = {\n            @ApiImplicitParam(name = \"$!pk.name\", value = \"$!{tableInfo.comment}$!pk.name\", dataType = \"$!pk.shortType\", required = true, paramType = \"path\")\n    })\n    void delete$!{tableInfo.name}(@PathVariable $!pk.shortType $!pk.name);\n\n    @GetMapping(\"\")\n    @ApiOperation(value = \"获取$!{tableInfo.comment}列表\", notes = \"获取$!{tableInfo.comment}列表\")\n    List<$!{tableInfo.name}VO> list$!{tableInfo.name}s();\n\n    @GetMapping(\"/{pageNo}/{pageSize}\")\n    @ApiOperation(value = \"获取$!{tableInfo.comment}列表（分页）\", notes = \"获取$!{tableInfo.comment}列表（分页）\")\n    @ApiImplicitParams({\n            @ApiImplicitParam(name = \"pageNo\", value = \"分页第几页，从索引0开始\", paramType = \"path\", required = true),\n            @ApiImplicitParam(name = \"pageSize\", value = \"每页包含的数据量,默认值10\", paramType = \"path\", defaultValue = \"10\", required = true),\n            @ApiImplicitParam(name = \"sortField\", value = \"排序字段,默认值createTime\", paramType = \"query\", defaultValue = \"createTime\"),\n            @ApiImplicitParam(name = \"sortOrder\", value = \"排序方式,默认值desc(降序)\", paramType = \"query\", defaultValue = \"desc\"),\n            @ApiImplicitParam(name = \"params\", value = \"其他查询参数\", paramType = \"query\")})\n    MoPageVO<$!{tableInfo.name}VO> listProductsPage(@PathVariable Integer pageNo, @PathVariable Integer pageSize,\n                                           @RequestParam Map<String, Object> params);\n\n    @GetMapping(\"/{$!pk.name}\")\n    @ApiOperation(value = \"获取$!{tableInfo.comment}\", notes = \"根据$!pk.name获取$!{tableInfo.comment}\")\n    @ApiImplicitParams(value = {\n            @ApiImplicitParam(name = \"$!pk.name\", value = \"$!{tableInfo.comment}$!pk.name\", dataType = \"$!pk.shortType\", required = true, paramType = \"path\")\n    })\n    $!{tableInfo.name}VO get$!{tableInfo.name}(@PathVariable $!pk.shortType $!pk.name);\n\n    @PutMapping(\"/{$!pk.name}\")\n    @ApiOperation(value = \"更新$!{tableInfo.comment}\", notes = \"更新$!{tableInfo.comment}\")\n    @ApiImplicitParams(value = {\n            @ApiImplicitParam(name = \"$!pk.name\", value = \"$!{tableInfo.comment}$!pk.name\", dataType = \"$!pk.shortType\", required = true, paramType = \"path\"),\n            @ApiImplicitParam(name = \"$!tool.firstLowerCase($tableInfo.name)Param\", value = \"$!{tableInfo.comment}入参\", dataType = \"$!{tableInfo.name}Param\", required = true, paramType = \"body\")\n    })\n    $!{tableInfo.name}VO update$!{tableInfo.name}(@PathVariable $!pk.shortType $!pk.name, @RequestBody $!{tableInfo.name}Param $!tool.firstLowerCase($tableInfo.name)Param);\n\n}"
        },
        {
          "name": "client.java",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Client\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n##$!callback.setSavePath($tool.append($tableInfo.savePath, \"/client\"))\n$!callback.setSavePath($tool.append($projectPath, \"/$!{projectName}-client\", \"/src/main/java/$!{packagePath}\", \"/client\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}client;\n\n##使用全局变量实现默认包导入\nimport $!{tableInfo.savePackageName}.api.$!{tableInfo.name}Api;\nimport org.springframework.cloud.openfeign.FeignClient;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})客户端\n *\n * @author $!author\n * @since $!time.currTime(\"yyyy/MM/dd\")\n */\n@FeignClient(value = \"$!projectName\", path = \"/mo/v1/$!tool.firstLowerCase($tableInfo.name)\", contextId = \"$!{tableInfo.name}Client\")\npublic interface $!{tableInfo.name}Client extends $!{tableInfo.name}Api {\n}"
        },
        {
          "name": "application.java",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Application\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n##$!callback.setSavePath($tool.append($tableInfo.savePath, \"/server\"))\n$!callback.setSavePath($tool.append($projectPath, \"/$!{projectName}-server\", \"/src/main/java/$!{packagePath}\", \"/server\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}server;\n\n##使用全局变量实现默认包导入\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.domain.EntityScan;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\nimport org.springframework.cloud.context.config.annotation.RefreshScope;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})应用\n *\n * @author $!author\n * @since $!time.currTime(\"yyyy/MM/dd\")\n */\n@SpringBootApplication(scanBasePackages = \"com.moluo\")\n@EnableJpaRepositories(basePackages = \"com.moluo\")\n@EntityScan(basePackages = \"com.moluo\")\n@EnableDiscoveryClient\n@RefreshScope\npublic class $!{tableInfo.name}Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run($!{tableInfo.name}Application.class, args);\n    }\n\n}"
        },
        {
          "name": "entityConvertUtils.java",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"ConvertUtils\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n##$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service/util\"))\n$!callback.setSavePath($tool.append($projectPath, \"/$!{projectName}-service\", \"/src/main/java/$!{packagePath}\", \"/service/util\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.util;\n\n##使用全局变量实现默认包导入\nimport com.moluo.common.domain.MoPageVO;\nimport $!{tableInfo.savePackageName}.domain.dto.$!{tableInfo.name}DTO;\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport org.springframework.data.domain.Page;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n##使用宏定义实现类注释信息\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})转换工具类\n *\n * @author $!author\n * @since $!time.currTime(\"yyyy/MM/dd\")\n */\npublic class $!{tableName} {\n\n    /**\n     * $!{tableInfo.comment}Entity转换为$!{tableInfo.comment}DTO\n     *\n     * @param entity $!{tableInfo.comment}entity\n     * @return $!{tableInfo.comment}DTO\n     */\n    public static $!{tableInfo.name}DTO entity2dto($!{tableInfo.name} entity) {\n        $!{tableInfo.name}DTO $!tool.firstLowerCase($tableInfo.name)DTO = new $!{tableInfo.name}DTO();\n#foreach($column in $tableInfo.fullColumn)\n        $!{tool.firstLowerCase($tableInfo.name)}DTO.set$!{tool.firstUpperCase($column.name)}(entity.get$!{tool.firstUpperCase($column.name)}());\n#end\n        return $!tool.firstLowerCase($tableInfo.name)DTO;\n    }\n\n    /**\n     * $!{tableInfo.comment}Entity列表转换为$!{tableInfo.comment}DTO列表\n     *\n     * @param entitys $!{tableInfo.comment}Entity列表\n     * @return $!{tableInfo.comment}DTO列表\n     */\n    public static List<$!{tableInfo.name}DTO> entitys2dtos(List<$!{tableInfo.name}> entitys) {\n        List<$!{tableInfo.name}DTO> $!{tool.firstLowerCase($tableInfo.name)}DTOS = new ArrayList<>();\n        for ($!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)} : entitys) {\n            $!{tool.firstLowerCase($tableInfo.name)}DTOS.add(entity2dto($!{tool.firstLowerCase($tableInfo.name)}));\n        }\n        return $!{tool.firstLowerCase($tableInfo.name)}DTOS;\n    }\n\n    /**\n     * $!{tableInfo.comment}DTO转换为$!{tableInfo.comment}Entity\n     *\n     * @param dto $!{tableInfo.comment}DTO\n     * @return $!{tableInfo.comment}Entity\n     */\n    public static $!{tableInfo.name} dto2entity($!{tableInfo.name}DTO dto) {\n        $!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)} = new $!{tableInfo.name}();\n#foreach($column in $tableInfo.fullColumn)\n        $!{tool.firstLowerCase($tableInfo.name)}.set$!{tool.firstUpperCase($column.name)}(dto.get$!{tool.firstUpperCase($column.name)}());\n#end\n        return $!{tool.firstLowerCase($tableInfo.name)};\n    }\n\n    /**\n     * $!{tableInfo.comment}DTO列表转换为$!{tableInfo.comment}Entity列表\n     *\n     * @param dtos $!{tableInfo.comment}DTO列表\n     * @return $!{tableInfo.comment}Entity列表\n     */\n    public static List<$!{tableInfo.name}> dtos2entitys(List<$!{tableInfo.name}DTO> dtos) {\n        List<$!{tableInfo.name}> $!{tool.firstLowerCase($tableInfo.name)}s = new ArrayList<>();\n        for ($!{tableInfo.name}DTO $!{tool.firstLowerCase($tableInfo.name)}DTO : dtos) {\n            $!{tool.firstLowerCase($tableInfo.name)}s.add(dto2entity($!{tool.firstLowerCase($tableInfo.name)}DTO));\n        }\n        return $!{tool.firstLowerCase($tableInfo.name)}s;\n    }\n    \n    /**\n     * $!{tableInfo.comment}Entity分页转换为$!{tableInfo.comment}DTO分页\n     *\n     * @param entityPage $!{tableInfo.comment}Entity分页\n     * @return $!{tableInfo.comment}DTO分页\n     */\n    public static MoPageVO<$!{tableInfo.name}DTO> entityPage2dtoPage(Page<$!{tableInfo.name}> entityPage) {\n        MoPageVO<$!{tableInfo.name}DTO> dtoPage = new MoPageVO<>();\n        dtoPage.setTotalCount(entityPage.getTotalElements());\n        dtoPage.setPageNo(entityPage.getNumber() + 1);\n        dtoPage.setPageSize(entityPage.getPageable().getPageSize());\n        dtoPage.setData(entitys2dtos(entityPage.getContent()));\n        return dtoPage;\n    }\n\n}"
        },
        {
          "name": "bootstrap.yaml",
          "code": "##设置回调\n$!callback.setFileName(\"bootstrap.yaml\")\n$!callback.setSavePath($tool.append($projectPath, \"/$!{projectName}-server\", \"/src/main/resources\"))\nserver:\n  port: 8080\nspring:\n  application:\n    name: $!projectName\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 192.168.61.20:8848\n        service: ${spring.application.name}\n      config:\n        server-addr: 192.168.61.20:8848\n        file-extension: yaml"
        }
      ]
    }
  },
  "columnConfig": {
    "Default": {
      "name": "Default",
      "elementList": [
        {
          "title": "disable",
          "type": "BOOLEAN",
          "selectValue": ""
        },
        {
          "title": "support",
          "type": "SELECT",
          "selectValue": "add,edit,query,del,ui"
        }
      ]
    }
  },
  "globalConfig": {
    "Default": {
      "name": "Default",
      "elementList": [
        {
          "name": "autoImport.vm",
          "value": "##自动导入包（仅导入实体属性需要的包，通常用于实体类）\n#foreach($import in $importList)\nimport $!import;\n#end"
        },
        {
          "name": "define.vm",
          "value": "##（Velocity宏定义）\n\n##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(\"Test\")\n#macro(setTableSuffix $suffix)\n    #set($tableName = $!tool.append($tableInfo.name, $suffix))\n#end\n\n##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(\"Test\")\n#macro(setPackageSuffix $suffix)\n#if($suffix!=\"\")package #end#if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}.#{end}$!suffix;\n#end\n\n##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\"/entity\", \".java\")\n#macro(save $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($tableInfo.name, $fileName))\n#end\n\n##定义表注释的宏定义，调用方式：#tableComment(\"注释信息\")\n#macro(tableComment $desc)\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})$desc\n *\n * @author $!author\n * @since $!time.currTime()\n */\n#end\n\n##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)\n#macro(getSetMethod $column)\n\n    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {\n        return $!{column.name};\n    }\n\n    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {\n        this.$!{column.name} = $!{column.name};\n    }\n#end"
        },
        {
          "name": "init.vm",
          "value": "##初始化区域\n\n##去掉表的t_前缀\n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(\"book_\",\"\")))\n\n##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误\n#foreach($column in $tableInfo.fullColumn)\n#if($column.name.startsWith(\"is\") && $column.type.equals(\"java.lang.Boolean\"))\n    $!column.setName($tool.firstLowerCase($column.name.substring(2)))\n#end\n#end\n\n##实现动态排除列\n#set($temp = $tool.newHashSet(\"testCreateTime\", \"otherColumn\"))\n#foreach($item in $temp)\n    #set($newList = $tool.newArrayList())\n    #foreach($column in $tableInfo.fullColumn)\n        #if($column.name!=$item)\n            ##带有反回值的方法调用时使用$tool.call来消除返回值\n            $tool.call($newList.add($column))\n        #end\n    #end\n    ##重新保存\n    $tableInfo.setFullColumn($newList)\n#end\n\n##对importList进行篡改\n#set($temp = $tool.newHashSet())\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$column.type.startsWith(\"java.lang.\"))\n        ##带有反回值的方法调用时使用$tool.call来消除返回值\n        $tool.call($temp.add($column.type))\n    #end\n#end\n##覆盖\n#set($importList = $temp)"
        },
        {
          "name": "mybatisSupport.vm",
          "value": "##针对Mybatis 进行支持，主要用于生成xml文件\n#foreach($column in $tableInfo.fullColumn)\n    ##储存列类型\n    $tool.call($column.ext.put(\"sqlType\", $tool.getField($column.obj.dataType, \"typeName\")))\n    #if($tool.newHashSet(\"java.lang.String\").contains($column.type))\n        #set($jdbcType=\"VARCHAR\")\n    #elseif($tool.newHashSet(\"java.lang.Boolean\", \"boolean\").contains($column.type))\n        #set($jdbcType=\"BOOLEAN\")\n    #elseif($tool.newHashSet(\"java.lang.Byte\", \"byte\").contains($column.type))\n        #set($jdbcType=\"BYTE\")\n    #elseif($tool.newHashSet(\"java.lang.Integer\", \"int\", \"java.lang.Short\", \"short\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Long\", \"long\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Float\", \"float\", \"java.lang.Double\", \"double\").contains($column.type))\n        #set($jdbcType=\"NUMERIC\")\n    #elseif($tool.newHashSet(\"java.util.Date\", \"java.sql.Timestamp\", \"java.time.Instant\", \"java.time.LocalDateTime\", \"java.time.OffsetDateTime\", \"\tjava.time.ZonedDateTime\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #elseif($tool.newHashSet(\"java.sql.Date\", \"java.time.LocalDate\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #else\n        ##其他类型\n        #set($jdbcType=\"VARCHAR\")\n    #end\n    $tool.call($column.ext.put(\"jdbcType\", $jdbcType))\n#end\n\n##定义宏，查询所有列\n#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end\n"
        },
        {
          "name": "angularDefine",
          "value": "##（Velocity宏定义）\n\n##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(\"Test\")\n#macro(setTableSuffix $suffix)\n    #set($tableName = $!tool.append($tableInfo.name, $suffix))\n#end\n\n##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(\"Test\")\n#macro(setPackageSuffix $suffix)\n#if($suffix!=\"\")package #end#if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}.#{end}$!suffix;\n#end\n\n##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\"/entity\", \".java\")\n#macro(save $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($!tool.firstLowerCase($!{tableInfo.name}), $fileName))\n#end\n\n##定义表注释的宏定义，调用方式：#tableComment(\"注释信息\")\n#macro(tableComment $desc)\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})$desc\n *\n * @author $!author\n * @since $!time.currTime()\n */\n#end\n\n##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)\n#macro(getSetMethod $column)\n\n    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {\n        return $!{column.name};\n    }\n\n    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {\n        this.$!{column.name} = $!{column.name};\n    }\n#end"
        },
        {
          "name": "projectName",
          "value": "mo-wiki"
        },
        {
          "name": "packagePath",
          "value": "com/moluo/wiki"
        }
      ]
    }
  }
}